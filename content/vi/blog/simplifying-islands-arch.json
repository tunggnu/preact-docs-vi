{"meta":{"title":"Simplifying Islands Architecture","date":"2024-10-27","authors":["reaper"]},"html":"<blockquote>\n<p>This is a slightly modified version of the original write up at <a href=\"https://barelyhuman.github.io/preact-islands-diy\" target=\"_blank\" rel=\"noopener noreferrer\">https://barelyhuman.github.io/preact-islands-diy</a></p>\n</blockquote>\n<h1>Islands</h1>\n\t\t\t\t<h2 id=\"intro\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#intro\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Intro (#intro)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Intro</span>\n\t\t\t\t</h2><p>This guide is a simple walkthrough to understand how island architecture works\nand being able to setup your own using tools you already have around you.</p>\n<p>First off, what are islands ? You can read more about it&#39;s origin from </p>\n<p><a href=\"https://jasonformat.com/islands-architecture/\" target=\"_blank\" rel=\"noopener noreferrer\">Islands Architecture - Jason Miller &rarr;</a></p>\n\n\t\t\t\t<h2 id=\"why-?\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#why-?\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Why ? (#why-?)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Why ?</span>\n\t\t\t\t</h2><p>For a lot of devs who&#39;ve worked with server rendering for a while, we kinda\nexpected frontend tech to take a turn towards server rendering at some point in\ntime since data fetching and processing is almost always faster on the server\nwhere you are closer to the data.</p>\n<p>Which is one of many reasons but then there&#39;s others that the entire web is\ndebating over, so we&#39;ll leave it to the smart people.</p>\n<p>Let&#39;s move on to implementing the concept</p>\n<h1>Getting Started</h1>\n\t\t\t\t<h2 id=\"basic-implementation\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#basic-implementation\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Basic Implementation (#basic-implementation)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Basic Implementation</span>\n\t\t\t\t</h2><p>The basic implementation can be generalized for most SSR + Client Hydration\napps.</p>\n<p>Here&#39;s an overview</p>\n<ol>\n<li>Initially render the view on the server as a static page.</li>\n<li>Hydrate the app on client</li>\n</ol>\n<p>To go into the details of each.</p>\n\n\t\t\t\t<h3 id=\"initial-server-render\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#initial-server-render\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Initial Server Render (#initial-server-render)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Initial Server Render</span>\n\t\t\t\t</h3><p>In this step, you still build the component tree with whatever UI library you&#39;re\nusing, Vue, React, Preact, Solid, etc. And then flatten the component tree to\nonly have the static and immediately computable data. In this case, no\nside-effects and state management based code is run.</p>\n<p>The output is a static html document that you can send to the client.</p>\n<p>Since this guide is tied to <a href=\"https://preactjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">preact</a>, we&#39;re going to use\na library from the preact team that helps us achieve this.</p>\n<p>Here&#39;s what a very rudimentary implementation of rendering a component on the\nserver would look like.</p>\n<p>We&#39;re using <code>express.js</code> here as an example due to it being the first choice of\nmost beginners, the process is mostly same for any other web server engine you\npick up. Hapi, Koa, Fastify, etc.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// server.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span>\n<span class=\"token keyword\">import</span> preactRenderToString <span class=\"token keyword\">from</span> <span class=\"token string\">'preact-render-to-string'</span>\n\n<span class=\"token comment\">// ...remaining express.js setup</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HomePage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">preactRenderToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>HomePage<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Here most work is done by <code>preactRenderToString</code> , and all we are doing is\nwriting components. With a little bit of bundling magic, we should be able to\nwrite in JSX to make it a little more friendly to work with.</p>\n\n\t\t\t\t<h3 id=\"hydrate\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#hydrate\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Hydrate (#hydrate)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Hydrate</span>\n\t\t\t\t</h3><p>Okay, so a term you&#39;ll see smart people use around a lot online.</p>\n<ul>\n<li>Partial Hydration</li>\n<li>Progressive Hydration</li>\n<li>add more as they find more such ways etc</li>\n</ul>\n<p>To be put simply, it&#39;s to bind the interactivity to a DOM element with\n<em>existing</em> state/effects/events</p>\n<p>This <em>existing</em> state/effects/events might be sent from the server, but if\nworking with a component that can handle it&#39;s own and the logic is well\ncontained in it, you just mount the component on the DOM with the necessary\nbindings.</p>\n<p>As an example, this might looks a little something like this</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// client.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hydrate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span>\n<span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./Counter'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// assuming the server rendered the component with the following ID as well.</span>\n  <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'counter'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Similar to the server render phase, we use a helper from <code>preact</code> to help\nhydrate a component. You could use <code>render</code> but then the actual element is\nalready something that was rendered by the server, rendering it again would make\nno sense and so we just ask preact to try to add in the needed event and state\ndata instead</p>\n<p>What I&#39;ve explained above is called Partial Hydration, since you don&#39;t hydrate\nthe entire app and just hydrate certain parts of it.</p>\n\n\t\t\t\t<h2 id=\"into-the-deep\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#into-the-deep\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Into the Deep (#into-the-deep)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Into the Deep</span>\n\t\t\t\t</h2><p>There&#39;s nothing more that you need to know to understand how to make an island\narch based app but, let&#39;s now get into implementing this.</p>\n<h1>The Code</h1><p>The code level architecture for this is very similar to most SSR models and Vite\nhas a good explanation for how to write your own ssr with vite</p>\n<p><a href=\"https://vitejs.dev/guide/ssr.html\" target=\"_blank\" rel=\"noopener noreferrer\">&rarr; Vite Guides - Server-Side Rendering</a></p>\n<p>We used webpack instead, to make it a little more verbose which is easier to explain.</p>\n<blockquote>\n<p>Note: You can get the referenced code from <a href=\"http://github.com/barelyhuman/preact-islands-diy/\" target=\"_blank\" rel=\"noopener noreferrer\">barelyhuman/preact-islands-diy</a></p>\n</blockquote>\n\n\t\t\t\t<h2 id=\"serverappjs\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#serverappjs\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: `server/app.js` (#serverappjs)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>`server/app.js`</span>\n\t\t\t\t</h2><p>Starting with <code>server/app.js</code> file. If you have the codebase open locally it\nwould be helpful while reading this.</p>\n<p>The below code snippet only highlights the needed areas</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> preactRenderToString <span class=\"token keyword\">from</span> <span class=\"token string\">'preact-render-to-string'</span>\n<span class=\"token keyword\">import</span> HomePage <span class=\"token keyword\">from</span> <span class=\"token string\">'../pages/HomePage.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withManifestBundles <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../lib/html.js'</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">withManifestBundles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token function\">preactRenderToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>HomePage<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Looking at the imports, we have the same imports as mentioned in the\n<a href=\"#getting-started\">Getting Started</a> section and not much has changed.</p>\n<p>The only addition here is the <code>withManifestBundles</code> helper which is what we&#39;ll\ntalk about next.</p>\n\n\t\t\t\t<h2 id=\"libhtmljs\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#libhtmljs\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: `lib/html.js` (#libhtmljs)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>`lib/html.js`</span>\n\t\t\t\t</h2><p>The HTML helper is different in different variants of the template but we&#39;ll be\nonly going through <code>webpack</code> version which is on the <code>main</code> branch.</p>\n<p>The base usecase of the helper is to be able to go through a manifest json that\nlists what files are being bundled by webpack and their hashed paths when being\nused in production.</p>\n<p>This is required since we will not know the hash and we need a programmatic way\nto find it out.</p>\n<p>This manifest is generated by webpack&#39;s client configuration which we&#39;ll take a\nlook at in a minute.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// fetch the manifest from the client output</span>\n<span class=\"token keyword\">import</span> manifest <span class=\"token keyword\">from</span> <span class=\"token string\">'../../dist/js/manifest.json'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withManifestBundles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// go through each key in the manifest and construct</span>\n  <span class=\"token comment\">// a script tag for each.</span>\n  <span class=\"token keyword\">const</span> bundledScripts <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>manifest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> scriptPath <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/public/js/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>manifest<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;script src=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>scriptPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>&lt;/script></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;html lang=\"en\">\n    &lt;head>\n      &lt;meta charset=\"UTF-8\" />\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      &lt;style id=\"_goober\">\n        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>styles<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n      &lt;/style>\n    &lt;/head>\n\n    &lt;body>\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>body<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    &lt;/body>\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bundledScripts<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n  &lt;/html></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>As explained in the comments, we just grab all the files we need from the\nmanifest and inject them as script tags into the final HTML that is sent from\nthe server.</p>\n<p>Moving onto the configuration that makes it possible to build this.</p>\n\n\t\t\t\t<h2 id=\"webpackconfig*js\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#webpackconfig*js\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: `webpack.config.*.js` (#webpackconfig*js)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>`webpack.config.*.js`</span>\n\t\t\t\t</h2><p>I tried to keep the webpack configuration as minimal as possible to avoid\nscaring people away from the whole idea so let&#39;s go through the configuration.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.server.js</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> nodeExternals <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-node-externals'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'node'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/server/app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'server.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">stats</span><span class=\"token operator\">:</span> <span class=\"token string\">'errors-warnings'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.jsx?$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">externals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">nodeExternals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Most of them need no explanation, and the only loader we have in place is the\n<code>babel-loader</code> since we are using a CSS-IN-JS solution for styling.</p>\n<p>There&#39;s nothing magical going on here, we just give it the entry point of\n<code>server/app.js</code> and let it build itself to the same folder as the client&#39;s\noutput.</p>\n<p>moving on to the client side config, which does add a few more things than\nsimply providing an entry and getting an output.</p>\n<p>This is shortened out to explain the relevant bits</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.client.js</span>\n\n<span class=\"token keyword\">const</span> entryPoints <span class=\"token operator\">=</span> glob\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/client'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/**/*.js'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">absolute</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^\\/]+\\.jsx?$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gm</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.jsx?$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    acc<span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> path\n    <span class=\"token keyword\">return</span> acc\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>So the first section is basically finding all files in <code>src/client</code> and creating\nan object of entries for webpack.</p>\n<p>Example: if <code>src/client/app.client.js</code> is a file then the output of the above\nwould be</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"app.client\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/client/app.client.js\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>this is nothing special, it&#39;s just how webpack expects entries to be defined.</p>\n<p>Everything else is generic configuration that&#39;s also present on the server side</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebpackManifestPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">publicPath</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">basePath</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">filter</span><span class=\"token operator\">:</span> <span class=\"token parameter\">file</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.mount\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Then we have the manifest plugin, which checks for files that have the string\n<code>mount</code> in their name, this is done to make sure that only the entry files are\nloaded and not random files and we do this by specifying a specific extension\ntype for the file.</p>\n<p>Some frameworks use a <code>islands</code> folder to separate islands from entry files. We\ninstead separate the entry files from islands and have the user decide what\nmounts as an island and what doesn&#39;t.</p>\n<p>The above <code>WebpackManifestPlugin</code> generates a <code>manifest.json</code> file in\n<code>dist/public/js</code> which has the bundled file names which we were using in the\n<code>lib/html.js</code> file.</p>\n\n\t\t\t\t<h2 id=\"babelrc\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#babelrc\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: `.babelrc` (#babelrc)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>`.babelrc`</span>\n\t\t\t\t</h2><p>This is the last part of the configuration, where you ask babel to make sure\nthat the JSX runtime it uses is from preact and not react.</p>\n<p>Pretty self explanatory, but if you need details about the option, please go\nthrough the docs of <a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">babel</a> and\n<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/plugin-transform-react-jsx</a></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token comment\">// .babelrc</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/plugin-transform-react-jsx\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token property\">\"runtime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"automatic\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"importSource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preact\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"folders\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#folders\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Folders (#folders)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Folders</span>\n\t\t\t\t</h2><p>We can now move on to each folders&#39; significance here.</p>\n<blockquote>\n<p><strong>Note</strong>: Please know that you can mix and match the folders if needed, just\nmake sure the configurations are edited to handle the changes you do. If not,\nthe current structure is good enough for most applications</p>\n</blockquote>\n\n\t\t\t\t<h2 id=\"client\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#client\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: `client` (#client)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>`client`</span>\n\t\t\t\t</h2><p>The <code>src/client</code> in this <code>main</code> branch is used to write the <code>mount</code> point code\nthat gets sent with the rendered html.</p>\n<p>You add selective mounting based on pages and selectors that you wish to use,\neven though it would fetch multiple JS files, these files are never to have\nanything more than the mounting code , your islands should be self serving and\nself reliant. You can however send an initial dataset from the server as a\n<code>data-*</code> attribute but this has to be serializable data or will be lost.</p>\n<p>You can also add a wrapper around to create a island manually, but\nweb-components are not widely supported so if using for a legacy level support\nsystem, you are better off manually mounting like mentioned above.</p>\n<p>example:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// src/client/index.mount.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h<span class=\"token punctuation\">,</span> hydrate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span>\n\n<span class=\"token comment\">// setup goober</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'goober'</span>\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// can be moved to a util file and used from there,</span>\n<span class=\"token comment\">// in this file as an example for now.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mount</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Component<span class=\"token punctuation\">,</span> elm</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elm<span class=\"token operator\">?.</span>dataset<span class=\"token operator\">?.</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>elm<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">delete</span> elm<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>props\n    <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> elm<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// lazy load and re-mount counter as a client side component if needed</span>\n  <span class=\"token comment\">// A better way would be to check if the `counter` element exists on</span>\n  <span class=\"token comment\">// the DOM before even importing the component to avoid un-needed</span>\n  <span class=\"token comment\">// JS downloads.</span>\n\n  <span class=\"token keyword\">const</span> Counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../components/Counter.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default\n  <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: components (#components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>components</span>\n\t\t\t\t</h2><p>The name is pretty self explanatory, since we aren&#39;t doing any segregation here\nas to what is and what isn&#39;t an island, you can shove all your components here\nlike you normally would.</p>\n\n\t\t\t\t<h2 id=\"layouts\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#layouts\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: layouts (#layouts)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>layouts</span>\n\t\t\t\t</h2><p>These are separated since I like to keep the layouts far away from components\nsince sometimes they have more than just rendering conditions. It&#39;s not needed\nin this specific case because in most cases you&#39;d be running your layouts on the\nserver and not on the client.</p>\n\n\t\t\t\t<h2 id=\"lib\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#lib\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: lib (#lib)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>lib</span>\n\t\t\t\t</h2><p>Contains common helper funcs for both client and server, since both are bundled\nseparately and dependencies will be inlined as needed.</p>\n\n\t\t\t\t<h2 id=\"pages\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#pages\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: pages (#pages)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>pages</span>\n\t\t\t\t</h2><p>This folder acts as the storage for templates. So anything that the server will\nbe rendering as a page would be put in here. The ability to use layouts and\nother components like a normal preact app helps with building composable\ntemplates but still it&#39;s easier to just have them separate from the actual\ncomponent code.</p>\n\n\t\t\t\t<h2 id=\"public\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#public\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: public (#public)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>public</span>\n\t\t\t\t</h2><p>Stuff that needs to be delivered statically by express is put here, webpack\ntakes care of copying the whole thing to the final folder.</p>\n\n\t\t\t\t<h2 id=\"server\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#server\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: server (#server)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>server</span>\n\t\t\t\t</h2><p>Self explanatory, server sided files, in most cases you&#39;d like to move routes to\na separate file and maybe add in middlewares to add a helper function to render\npreact components for you.</p>\n<p>Something like this is definitely a part of the server and not going to be\nclient sided so just keep it in this folder.</p>\n<p>Example</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">comp<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token function\">preactRenderToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// and somewhere else in the app</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>Homepage<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'reaper'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>That&#39;s actually all the code that contributes to setting up your own partial\nhydration / island styled hydration with nodejs.</p>\n<p>Most of this can be achieved with almost all bundlers and a little more\nmodification to how the configurations are generated, can help you achieve a\nsimilar DX to astro though you are better off using astro if you aren&#39;t a fan of\nmaintaining configs.</p>\n"}