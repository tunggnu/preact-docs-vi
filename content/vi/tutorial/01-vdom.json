{"meta":{"title":"Virtual DOM","prev":"/tutorial","next":"/tutorial/02-events","solvable":true,"tutorial":{"setup":"useResult(function(result) {\n  var hasEm = result.output.innerHTML.match(/<em>World\\!?<\\/em>/gi);\n  var p = result.output.querySelector('p');\n  var hasColor = p && p.style && p.style.color === 'purple';\n  if (hasEm && hasColor) {\n    solutionCtx.setSolved(true);\n  }\n}, []);","initial":"import { createElement, render } from 'preact';\n\nfunction App() {\n  return (\n    <p class=\"big\">Hello World!</p>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));","final":"import { createElement, render } from 'preact';\n\nfunction App() {\n  return (\n    <p class=\"big\" style={{ color: 'purple' }}>\n      Hello <em>World</em>!\n    </p>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));"}},"html":"<h1>Virtual DOM</h1><p>Bạn có thể đã nghe mọi người nhắc đến &quot;Virtual DOM&quot; và tự hỏi:\nđiều gì làm cho nó &quot;ảo&quot;? &quot;Virtual&quot; DOM khác gì so với DOM thật mà chúng ta sử dụng khi lập trình cho trình duyệt?</p>\n<p>Virtual DOM là một mô tả đơn giản về một cấu trúc cây sử dụng các đối tượng:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// một phần tử &lt;p></span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// với class=\"big\"</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'Hello World!'</span> <span class=\"token comment\">// và văn bản \"Hello World!\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Các thư viện như Preact cung cấp một cách để xây dựng các mô tả này, sau đó có thể được so sánh với cây DOM của trình duyệt. Khi từng phần của cây được so sánh, cây DOM của trình duyệt sẽ được cập nhật để khớp với cấu trúc được mô tả bởi cây Virtual DOM.</p>\n<p>Đây là một công cụ hữu ích, vì nó cho phép chúng ta xây dựng giao diện người dùng một cách <em>khai báo</em> thay vì <em>tường minh</em>. Thay vì mô tả <em>cách</em> cập nhật DOM khi xảy ra các sự kiện đến từ bàn phím hoặc chuột, chúng ta chỉ cần mô tả <em>DOM nên trông như thế nào</em> sau khi xảy ra các sự kiện đó. Điều này có nghĩa là chúng ta có thể liên tục cung cấp cho Preact các mô tả về cấu trúc cây, và nó sẽ cập nhật cây DOM của trình duyệt để khớp với mỗi mô tả mới – bất kể cây DOM hiện tại là gì.</p>\n<p>Trong chương này, chúng ta sẽ học cách tạo cây Virtual DOM, và cách yêu cầu Preact cập nhật DOM để khớp với các cây đó.</p>\n\n\t\t\t\t<h2 id=\"tạo-cây-virtual-dom\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#tạo-cây-virtual-dom\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Tạo cây Virtual DOM (#tạo-cây-virtual-dom)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Tạo cây Virtual DOM</span>\n\t\t\t\t</h2><p>Có một vài cách để tạo cây Virtual DOM:</p>\n<ul>\n<li><code>createElement()</code>: một hàm được cung cấp bởi Preact</li>\n<li><a href=\"https://en.wikipedia.org/wiki/JSX_(JavaScript)\" target=\"_blank\" rel=\"noopener noreferrer\">JSX</a>: cú pháp giống HTML có thể được biên dịch sang JavaScript</li>\n<li><a href=\"https://github.com/developit/htm\" target=\"_blank\" rel=\"noopener noreferrer\">HTM</a>: cú pháp giống HTML bạn có thể viết trực tiếp trong JavaScript</li>\n</ul>\n<p>Sẽ hữu ích nếu bắt đầu với cách đơn giản nhất, đó là gọi trực tiếp hàm <code>createElement()</code> của Preact:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createElement<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// một phần tử &lt;p></span>\n  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'big'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// với class=\"big\"</span>\n  <span class=\"token string\">'Hello World!'</span>    <span class=\"token comment\">// và văn bản \"Hello World!\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vdom<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Đoạn mã trên tạo ra một &quot;mô tả&quot; Virtual DOM của một phần tử đoạn văn.\nTham số đầu tiên của createElement là tên phần tử HTML.\nTham số thứ hai là &quot;props&quot; của phần tử - một đối tượng chứa các thuộc tính\n(hoặc thuộc tính) để gán cho phần tử.\nBất kỳ tham số bổ sung nào là con của phần tử, có thể là chuỗi (như\n<code>&#39;Hello World!&#39;</code>) hoặc các phần tử Virtual DOM từ các lần gọi <code>createElement()</code> khác.</p>\n<p>Dòng cuối cùng yêu cầu Preact xây dựng một cây DOM thật khớp với &quot;mô tả&quot; Virtual DOM của chúng ta, và chèn cây DOM đó vào <code>&lt;body&gt;</code> của trang web.</p>\n\n\t\t\t\t<h2 id=\"jsx-tuyệt-vời-hơn\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#jsx-tuyệt-vời-hơn\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: JSX tuyệt vời hơn! (#jsx-tuyệt-vời-hơn)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>JSX tuyệt vời hơn!</span>\n\t\t\t\t</h2><p>Chúng ta có thể viết lại ví dụ trước bằng <a href=\"https://en.wikipedia.org/wiki/JSX_(JavaScript)\" target=\"_blank\" rel=\"noopener noreferrer\">JSX</a> mà không thay đổi chức năng.\nJSX cho phép chúng ta mô tả phần tử đoạn văn bằng cú pháp giống HTML, giúp\ngiữ cho mã dễ đọc hơn khi mô tả các cây phức tạp hơn. Nhược điểm của JSX là\nmã của chúng ta không còn là JavaScript thuần nữa, và phải được biên dịch bởi một công cụ như <a href=\"https://babeljs.io\" target=\"_blank\" rel=\"noopener noreferrer\">Babel</a>. Các trình biên dịch sẽ chuyển đổi ví dụ JSX dưới đây thành đúng mã <code>createElement()</code> mà chúng ta đã thấy ở ví dụ trước.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createElement<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>big<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello World!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vdom<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Trông giống HTML hơn nhiều rồi!</p>\n<p>Có một điều cuối cùng cần lưu ý về JSX: mã bên trong một phần tử JSX\n(bên trong dấu ngoặc nhọn) là cú pháp đặc biệt và không phải JavaScript. Để sử dụng cú pháp JavaScript như số hoặc biến, bạn cần &quot;nhảy&quot; ra khỏi JSX bằng một <code>{biểu_thức}</code> - tương tự như các trường trong template. Ví dụ dưới đây cho thấy hai biểu thức: một để gán <code>class</code> thành một chuỗi ngẫu nhiên, và một để tính toán một số.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> maybeBig <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">.5</span> <span class=\"token operator\">?</span> <span class=\"token string\">'big'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'small'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>maybeBig<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span><span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n                 <span class=\"token comment\">// ^---JS---^       ^--JS--^</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Nếu chúng ta <code>render(vdom, document.body)</code>, văn bản &quot;Hello 42!&quot; sẽ được hiển thị.</p>\n\n\t\t\t\t<h2 id=\"thêm-một-lần-nữa-với-htm\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#thêm-một-lần-nữa-với-htm\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Thêm một lần nữa với HTM (#thêm-một-lần-nữa-với-htm)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Thêm một lần nữa với HTM</span>\n\t\t\t\t</h2><p><a href=\"https://github.com/developit/htm\" target=\"_blank\" rel=\"noopener noreferrer\">HTM</a> là một lựa chọn thay thế cho JSX sử dụng template string chuẩn của JavaScript,\nloại bỏ nhu cầu về trình biên dịch. Nếu bạn chưa từng gặp template string,\nchúng là một loại chuỗi đặc biệt có thể chứa các trường <code>${biểu_thức}</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Số lượng: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> đơn vị</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"Số lượng: 42 đơn vị\"</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>HTM sử dụng <code>${biểu_thức}</code> thay vì cú pháp <code>{biểu_thức}</code> của JSX, điều này\ngiúp phân biệt rõ hơn đâu là phần tử HTM/JSX, đâu là JavaScript thuần:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> html <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'htm/preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> maybeBig <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">.5</span> <span class=\"token operator\">?</span> <span class=\"token string\">'big'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'small'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p class=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>maybeBig<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!&lt;/p></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// ^--JS--^          ^-JS-^</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Tất cả các ví dụ trên đều cho ra kết quả giống nhau: một cây Virtual DOM có thể\nđược đưa cho Preact để tạo hoặc cập nhật một cây DOM hiện có.</p>\n<hr>\n\n\t\t\t\t<h2 id=\"ngoại-truyện:-component\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#ngoại-truyện:-component\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Ngoại truyện: Component (#ngoại-truyện:-component)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Ngoại truyện: Component</span>\n\t\t\t\t</h2><p>Chúng ta sẽ tìm hiểu chi tiết hơn về Component ở các chương sau, nhưng\nhiện tại điều quan trọng là biết rằng các phần tử HTML như <code>&lt;p&gt;</code> chỉ là một trong\n<em>hai</em> loại phần tử Virtual DOM. Loại còn lại là Component, là một phần tử Virtual DOM mà type là một hàm thay vì một chuỗi như <code>p</code>.</p>\n<p>Component là các khối xây dựng của ứng dụng Virtual DOM. Hiện tại, chúng ta sẽ\ntạo một component đơn giản bằng cách chuyển JSX vào một hàm:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createElement <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>big<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello World!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Khi truyền một component vào <code>render()</code>, điều quan trọng là để Preact tự khởi tạo thay vì gọi trực tiếp component của bạn, điều này sẽ gây lỗi không mong muốn:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// KHÔNG NÊN: Gọi trực tiếp component nghĩa là chúng sẽ không được tính là một</span>\n<span class=\"token comment\">// VNode và do đó không thể sử dụng các chức năng liên quan đến vnode.</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LỖI</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LỖI</span>\n\n<span class=\"token comment\">// NÊN: Truyền component bằng createElement() hoặc JSX cho phép Preact render đúng:</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// thành công</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// thành công</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"thực-hành\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#thực-hành\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Thực hành! (#thực-hành)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Thực hành!</span>\n\t\t\t\t</h2><p>Ở phía bên phải của trang này, bạn sẽ thấy mã từ ví dụ trước ở phía trên cùng.\nBên dưới là một hộp với kết quả khi chạy mã đó. Bạn có thể\nchỉnh sửa mã và xem các thay đổi ảnh hưởng (hoặc làm hỏng!) kết quả như thế nào.</p>\n<p>Để kiểm tra những gì bạn đã học trong chương này, hãy thử làm cho văn bản nổi bật hơn!\nLàm cho từ <code>World</code> nổi bật bằng cách bọc nó trong thẻ HTML: <code>&lt;em&gt;</code> và <code>&lt;/em&gt;</code>.</p>\n<p>Sau đó, làm cho toàn bộ văn bản <span style=\"color:purple\">màu tím</span> bằng cách thêm thuộc tính\n<code>style</code>. Thuộc tính <code>style</code> là đặc biệt, cho phép truyền một đối tượng với\nmột hoặc nhiều thuộc tính CSS để gán cho phần tử. Để truyền một đối tượng làm giá trị prop, bạn cần dùng <code>{biểu_thức}</code>, ví dụ: <code>style={{ property: &#39;value&#39; }}</code>.</p>\n<solution>\n  <h4>🎉 Chúc mừng!</h4>\n  <p>Chúng ta đã làm cho mọi thứ xuất hiện trên màn hình. Tiếp theo chúng ta sẽ làm cho chúng tương tác.</p>\n</solution>\n\n\n\n\n\n\n\n"}