{"meta":{"title":"Thành phần","prev":"/tutorial/02-events","next":"/tutorial/04-state","solvable":true,"tutorial":{"setup":"useRealm(function (realm) {\n  var options = require('preact').options;\n  var win = realm.globalThis;\n  var prevConsoleLog = win.console.log;\n  var hasComponent = false;\n  var check = false;\n\n  win.console.log = function() {\n    if (hasComponent && check) {\n      solutionCtx.setSolved(true);\n    }\n    return prevConsoleLog.apply(win.console, arguments);\n  };\n\n  var e = options.event;\n  options.event = function(e) {\n    if (e.type === 'click') {\n      check = true;\n      setTimeout(() => check = false);\n    }\n  };\n\n  var r = options.__r;\n  options.__r = function(vnode) {\n    if (typeof vnode.type === 'function' && /MyButton/.test(vnode.type)) {\n      hasComponent = true;\n    }\n  }\n\n  return function () {\n    options.event = e;\n    options.__r = r;\n    win.console.log = prevConsoleLog;\n  };\n}, []);","initial":"import { render } from \"preact\";\n\nfunction MyButton(props) {\n  // bắt đầu từ đây!\n}\n\nfunction App() {\n  const clicked = () => {\n    console.log('Xin chào!')\n  }\n\n  return (\n    <div>\n      <p class=\"count\">Số đếm:</p>\n      <button style={{ color: 'purple' }} onClick={clicked}>Nhấn tôi</button>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));","final":"import { render } from \"preact\";\n\nfunction MyButton(props) {\n  return <button style={props.style} onClick={props.onClick}>{props.children}</button>\n}\n\nfunction App() {\n  const clicked = () => {\n    console.log('Xin chào!')\n  }\n\n  return (\n    <div>\n      <p class=\"count\">Số đếm:</p>\n      <MyButton style={{ color: 'purple' }} onClick={clicked}>Nhấn tôi</MyButton>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));"}},"html":"<h1>Thành phần</h1><p>Như chúng ta đã đề cập ở phần một của hướng dẫn này, khối xây dựng chính trong các ứng dụng Virtual DOM là Thành phần (Component). Một Thành phần là một phần tự chứa của ứng dụng có thể được render như một phần của cây Virtual DOM giống như một phần tử HTML. Bạn có thể nghĩ về Thành phần như một lời gọi hàm: cả hai đều là cơ chế cho phép tái sử dụng mã và trừu tượng hóa.</p>\n<p>Để minh họa, hãy tạo một thành phần đơn giản tên là <code>MyButton</code> trả về một cây Virtual DOM mô tả một phần tử HTML <code>&lt;button&gt;</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Chúng ta có thể sử dụng thành phần này trong ứng dụng bằng cách tham chiếu nó trong JSX:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>MyButton text<span class=\"token operator\">=</span><span class=\"token string\">\"Nhấn tôi!\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// còn nhớ createElement chứ? dòng trên sẽ được biên dịch thành:</span>\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>MyButton<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Nhấn tôi!\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Bất cứ nơi nào bạn dùng JSX để mô tả cây HTML, bạn cũng có thể mô tả cây Thành phần. Sự khác biệt là một thành phần được mô tả trong JSX bằng một tên bắt đầu bằng chữ hoa tương ứng với tên thành phần (một biến JavaScript).</p>\n<p>Khi Preact render cây Virtual DOM được mô tả bởi JSX của bạn, mỗi hàm thành phần mà nó gặp sẽ được gọi tại vị trí đó trong cây. Ví dụ, chúng ta có thể render thành phần <code>MyButton</code> vào body của trang web bằng cách truyền một phần tử JSX mô tả thành phần đó cho <code>render()</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Nhấn tôi!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"lồng-thành-phần\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#lồng-thành-phần\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Lồng thành phần (#lồng-thành-phần)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Lồng thành phần</span>\n\t\t\t\t</h2><p>Các thành phần có thể tham chiếu các thành phần khác trong cây Virtual DOM mà chúng trả về. Điều này tạo ra một cây các thành phần:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MediaPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Phát<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dừng<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MediaPlayer</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Chúng ta có thể sử dụng kỹ thuật này để render các cây thành phần khác nhau cho các trường hợp khác nhau. Hãy làm cho <code>MediaPlayer</code> hiển thị nút &quot;Phát&quot; khi chưa phát âm thanh, và nút &quot;Dừng&quot; khi đang phát:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MediaPlayer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dừng<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Phát<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MediaPlayer</span></span> <span class=\"token attr-name\">playing</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// render ra &lt;button>Phát&lt;/button></span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MediaPlayer</span></span> <span class=\"token attr-name\">playing</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// render ra &lt;button>Dừng&lt;/button></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p><strong>Nhớ rằng:</strong> dấu ngoặc nhọn <code>{curly}</code> trong JSX cho phép chúng ta nhảy vào JavaScript thuần. Ở đây chúng ta dùng biểu thức <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"noopener noreferrer\">ternary</a> để hiển thị các nút khác nhau dựa trên giá trị của prop <code>playing</code>.</p>\n</blockquote>\n\n\t\t\t\t<h2 id=\"con-của-thành-phần\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#con-của-thành-phần\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Con của thành phần (#con-của-thành-phần)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Con của thành phần</span>\n\t\t\t\t</h2><p>Các thành phần cũng có thể được lồng vào nhau giống như các phần tử HTML. Một trong những lý do Thành phần là một nguyên thủy mạnh mẽ là vì chúng cho phép chúng ta áp dụng logic tùy chỉnh để kiểm soát cách các phần tử Virtual DOM lồng bên trong một thành phần được render.</p>\n<p>Cách hoạt động rất đơn giản: bất kỳ phần tử Virtual DOM nào lồng bên trong một thành phần trong JSX sẽ được truyền vào thành phần đó dưới dạng prop đặc biệt <code>children</code>. Một thành phần có thể chọn vị trí đặt các con của nó bằng cách tham chiếu chúng trong JSX với biểu thức <code>{children}</code>. Hoặc, thành phần có thể chỉ cần trả về giá trị <code>children</code>, và Preact sẽ render các phần tử Virtual DOM đó ngay tại vị trí thành phần đó trong cây Virtual DOM.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>children  <span class=\"token comment\">// [&lt;a />, &lt;b />]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Quay lại ví dụ trước, thành phần <code>MyButton</code> của chúng ta mong đợi một prop <code>text</code> được chèn vào phần tử <code>&lt;button&gt;</code> làm nội dung hiển thị. Nếu chúng ta muốn hiển thị một hình ảnh thay vì văn bản thì sao?</p>\n<p>Hãy viết lại <code>MyButton</code> để cho phép lồng nội dung bằng prop <code>children</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon.png<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      Nhấn tôi!\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Bây giờ, sau khi xem một vài ví dụ về các thành phần render các thành phần khác, hy vọng bạn đã thấy rõ cách các thành phần lồng nhau giúp chúng ta xây dựng các ứng dụng phức tạp từ nhiều mảnh nhỏ hơn.</p>\n<hr>\n\n\t\t\t\t<h2 id=\"các-loại-thành-phần\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#các-loại-thành-phần\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Các loại thành phần (#các-loại-thành-phần)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Các loại thành phần</span>\n\t\t\t\t</h2>\n\n<p>Cho đến giờ, chúng ta đã thấy các Thành phần là hàm. Thành phần hàm nhận vào <code>props</code> làm đầu vào và trả về một cây Virtual DOM làm đầu ra. Thành phần cũng có thể được viết dưới dạng class JavaScript, được Preact khởi tạo và cung cấp phương thức <code>render()</code> hoạt động giống như một thành phần hàm.</p>\n<p>Class component được tạo bằng cách kế thừa lớp cơ sở <code>Component</code> của Preact. Trong ví dụ dưới đây, hãy chú ý cách <code>render()</code> nhận <code>props</code> làm đầu vào và trả về một cây Virtual DOM làm đầu ra - giống như một thành phần hàm!</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Nhấn tôi!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Lý do chúng ta có thể dùng class để định nghĩa thành phần là để theo dõi <em>vòng đời</em> của thành phần. Mỗi lần Preact gặp một thành phần khi render cây Virtual DOM, nó sẽ tạo một instance mới của class đó (<code>new MyButton()</code>).</p>\n<p>Tuy nhiên, nếu bạn còn nhớ từ chương một - Preact có thể liên tục nhận các cây Virtual DOM mới. Mỗi lần chúng ta cung cấp cho Preact một cây mới, nó sẽ so sánh với cây trước để xác định những gì đã thay đổi, và áp dụng các thay đổi đó lên trang.</p>\n<p>Khi một thành phần được định nghĩa bằng class, mọi <em>cập nhật</em> cho thành phần đó trong cây sẽ tái sử dụng cùng một instance class. Điều đó có nghĩa là bạn có thể lưu trữ dữ liệu bên trong class component và dữ liệu đó sẽ có sẵn cho lần gọi <code>render()</code> tiếp theo.</p>\n<p>Class component cũng có thể triển khai một số <a href=\"/guide/v10/components#lifecycle-methods\">phương thức vòng đời</a> mà Preact sẽ gọi khi có thay đổi trong cây Virtual DOM:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Xin chào từ một component &lt;MyButton> mới!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Một component &lt;MyButton> đã được cập nhật!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Nhấn tôi!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// log: \"Xin chào từ một component &lt;MyButton> mới!\"</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Nhấn tôi!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// log: \"Một component &lt;MyButton> đã được cập nhật!\"</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Vòng đời của class component khiến chúng trở thành công cụ hữu ích để xây dựng các phần của ứng dụng phản ứng với thay đổi, thay vì chỉ ánh xạ <code>props</code> sang cây. Chúng cũng cung cấp cách lưu trữ thông tin riêng biệt tại mỗi vị trí chúng được đặt trong cây Virtual DOM. Ở chương tiếp theo, chúng ta sẽ xem cách các thành phần có thể cập nhật phần cây của mình bất cứ khi nào muốn thay đổi nó.</p>\n<hr>\n\n\t\t\t\t<h2 id=\"thực-hành\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#thực-hành\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Thực hành! (#thực-hành)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Thực hành!</span>\n\t\t\t\t</h2><p>Để luyện tập, hãy kết hợp những gì bạn đã học về thành phần với kỹ năng sự kiện từ hai chương trước!</p>\n<p>Tạo một thành phần <code>MyButton</code> nhận các prop <code>style</code>, <code>children</code> và <code>onClick</code>, và trả về một phần tử HTML <code>&lt;button&gt;</code> với các prop đó được áp dụng.</p>\n<solution>\n  <h4>🎉 Chúc mừng!</h4>\n  <p>Bạn đang trên con đường trở thành chuyên gia về thành phần!</p>\n</solution>\n\n\n\n\n\n\n\n"}