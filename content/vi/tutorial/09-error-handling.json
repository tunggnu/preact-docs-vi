{"meta":{"title":"Xử lý lỗi (Error Handling)","prev":"/tutorial/08-keys","next":"/tutorial/10-links","solvable":true,"tutorial":{"setup":"useResult(function(result) {\n  var options = require('preact').options;\n\n  var oe = options.__e;\n  options.__e = function(error, s) {\n    if (/objects are not valid/gi.test(error)) {\n      throw Error('Có vẻ bạn đang cố render một đối tượng Error trực tiếp: hãy thử lưu `error.message` thay vì chính đối tượng `error`.');\n    }\n    oe.apply(this, arguments);\n    setTimeout(function() {\n      if (result.output.textContent.match(/error/i)) {\n        solutionCtx.setSolved(true);\n      }\n    }, 10);\n  };\n\n  return function () {\n    options.__e = oe;\n  };\n}, []);","initial":"import { render, Component } from 'preact';\nimport { useState } from 'preact/hooks';\n\nfunction Clicker() {\n  const [clicked, setClicked] = useState(false);\n\n  if (clicked) {\n    throw new Error('Tôi đang gây lỗi');\n  }\n\n  return <button onClick={() => setClicked(true)}>Nhấn tôi</button>;\n}\n\nclass App extends Component {\n  state = { error: null };\n\n  render() {\n    return <Clicker />;\n  }\n}\n\nrender(<App />, document.getElementById(\"app\"));","final":"import { render, Component } from 'preact';\nimport { useState } from 'preact/hooks';\n\nfunction Clicker() {\n  const [clicked, setClicked] = useState(false);\n\n  if (clicked) {\n    throw new Error('Tôi đang gây lỗi');\n  }\n\n  return <button onClick={() => setClicked(true)}>Nhấn tôi</button>;\n}\n\nclass App extends Component {\n  state = { error: null };\n\n  componentDidCatch(error) {\n    this.setState({ error: error.message });\n  }\n\n  render() {\n    const { error } = this.state;\n    if (error) {\n      return <p>Ôi không! Đã có lỗi: {error}</p>\n    }\n    return <Clicker />;\n  }\n}\n\nrender(<App />, document.getElementById(\"app\"));"}},"html":"<h1>Xử lý lỗi (Error Handling)</h1><p>JavaScript là một ngôn ngữ linh hoạt và được thông dịch, điều này có nghĩa là rất dễ (thậm chí là thường xuyên) gặp phải lỗi khi chạy chương trình. Dù là do một tình huống bất ngờ hay do lỗi trong mã mà chúng ta viết, việc có thể theo dõi lỗi và triển khai một số hình thức phục hồi hoặc xử lý lỗi hợp lý là rất quan trọng.</p>\n<p>Trong Preact, cách chúng ta làm điều này là bắt lỗi và lưu chúng vào state. Điều này cho phép một component chặn một lần render bị lỗi hoặc không mong muốn và chuyển sang render một nội dung khác như một phương án dự phòng.</p>\n\n\t\t\t\t<h2 id=\"chuyển-lỗi-thành-state\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#chuyển-lỗi-thành-state\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Chuyển lỗi thành state (#chuyển-lỗi-thành-state)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Chuyển lỗi thành state</span>\n\t\t\t\t</h2><p>Có hai API để bắt lỗi và chuyển chúng thành state:\n<code>componentDidCatch</code> và <code>getDerivedStateFromError</code>. Chúng khá giống nhau về chức năng, và đều là các phương thức bạn có thể triển khai trên một component lớp:</p>\n<p><strong>componentDidCatch</strong> nhận một đối số là <code>Error</code>, và có thể quyết định làm gì với lỗi đó tùy từng trường hợp. Nó có thể gọi <code>this.setState()</code> để render một cây dự phòng hoặc thay thế, điều này sẽ &quot;bắt&quot; lỗi và đánh dấu nó đã được xử lý. Hoặc, phương thức này cũng có thể chỉ log lỗi ở đâu đó và để nó tiếp tục không được xử lý (dẫn đến crash).</p>\n<p><strong>getDerivedStateFromError</strong> là một phương thức tĩnh nhận vào một <code>Error</code>, và trả về một đối tượng cập nhật state, đối tượng này sẽ được áp dụng cho component thông qua <code>setState()</code>. Vì phương thức này luôn tạo ra một thay đổi state dẫn đến việc component được render lại, nên nó luôn đánh dấu lỗi là đã được xử lý.</p>\n<p>Ví dụ sau đây cho thấy cách sử dụng một trong hai phương thức để bắt lỗi và hiển thị một thông báo lỗi thân thiện thay vì bị crash:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ôi không! Đã gặp lỗi: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Component trên là một ví dụ khá phổ biến về cách xử lý lỗi được triển khai trong các ứng dụng Preact, thường được gọi là <em>Error Boundary</em> (biên lỗi).</p>\n\n\t\t\t\t<h2 id=\"lồng-nhau-và-lan-truyền-lỗi\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#lồng-nhau-và-lan-truyền-lỗi\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Lồng nhau và lan truyền lỗi (#lồng-nhau-và-lan-truyền-lỗi)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Lồng nhau và lan truyền lỗi</span>\n\t\t\t\t</h2><p>Các lỗi gặp phải khi Preact render cây Virtual DOM của bạn sẽ &quot;lan truyền lên trên&quot;, giống như các sự kiện DOM. Bắt đầu từ component gặp lỗi, mỗi component cha trong cây sẽ có cơ hội xử lý lỗi đó.</p>\n<p>Do đó, các Error Boundary có thể được lồng nhau nếu được triển khai bằng <code>componentDidCatch</code>. Khi phương thức <code>componentDidCatch()</code> của một component <em>không</em> gọi <code>setState()</code>, lỗi sẽ tiếp tục lan lên cây Virtual DOM cho đến khi gặp một component có phương thức <code>componentDidCatch</code> <em>có</em> gọi <code>setState()</code>.</p>\n\n\t\t\t\t<h2 id=\"thực-hành\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#thực-hành\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Thực hành! (#thực-hành)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Thực hành!</span>\n\t\t\t\t</h2><p>Để kiểm tra kiến thức xử lý lỗi, hãy thêm xử lý lỗi cho một component App đơn giản. Một trong các component nằm sâu bên trong App có thể ném ra lỗi trong một số trường hợp, và chúng ta muốn bắt lỗi này để có thể hiển thị một thông báo thân thiện cho người dùng biết rằng đã gặp lỗi không mong muốn.</p>\n<solution>\n  <h4>🎉 Chúc mừng!</h4>\n  <p>Bạn đã học cách xử lý lỗi trong mã Preact!</p>\n</solution>\n\n\n\n\n\n\n"}