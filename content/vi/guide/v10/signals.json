{"meta":{"title":"Signals","description":"Signals: composable reactive state with automatic rendering","toc":[{"text":"Signals","id":"signals","level":1},{"text":"Introduction","id":"introduction","level":2},{"text":"Installation","id":"installation","level":2},{"text":"Usage Example","id":"usage-example","level":2},{"text":"Building the UI","id":"building-the-ui","level":2},{"text":"Deriving state via computed signals","id":"deriving-state-via-computed-signals","level":2},{"text":"Managing global app state","id":"managing-global-app-state","level":2},{"text":"Local state with signals","id":"local-state-with-signals","level":2},{"text":"Advanced signals usage","id":"advanced-signals-usage","level":2},{"text":"Reacting to signals outside of components","id":"reacting-to-signals-outside-of-components","level":3},{"text":"Reading signals without subscribing to them","id":"reading-signals-without-subscribing-to-them","level":2},{"text":"Combining multiple updates into one","id":"combining-multiple-updates-into-one","level":2},{"text":"Rendering optimizations","id":"rendering-optimizations","level":3},{"text":"API","id":"api","level":2},{"text":"signal(initialValue)","id":"signalinitialvalue","level":3},{"text":"computed(fn)","id":"computedfn","level":3},{"text":"effect(fn)","id":"effectfn","level":3},{"text":"batch(fn)","id":"batchfn","level":3},{"text":"untracked(fn)","id":"untrackedfn","level":3}]},"html":"<h1>Signals</h1><p>Signals are reactive primitives for managing application state.</p>\n<p>What makes Signals unique is that state changes automatically update components and UI in the most efficient way possible. Automatic state binding and dependency tracking allows Signals to provide excellent ergonomics and productivity while eliminating the most common state management footguns.</p>\n<p>Signals are effective in applications of any size, with ergonomics that speed up the development of small apps, and performance characteristics that ensure apps of any size are fast by default.</p>\n<hr>\n<p><strong>Important</strong></p>\n<p>This guide will go over using Signals in Preact, and while this is largely applicable to both the Core and React libraries, there will be some usage differences. The best references for their usage is in their respective docs: <a href=\"https://github.com/preactjs/signals\" target=\"_blank\" rel=\"noopener noreferrer\">`@preact/signals-core`</a>, <a href=\"https://github.com/preactjs/signals/tree/main/packages/react\" target=\"_blank\" rel=\"noopener noreferrer\">`@preact/signals-react`</a></p>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"introduction\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#introduction\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Introduction (#introduction)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Introduction</span>\n\t\t\t\t</h2><p>Much of the pain of state management in JavaScript is reacting to changes for a given value, because values are not directly observable. Solutions typically work around this by storing values in a variable and continuously checking to see if they have changed, which is cumbersome and not ideal for performance. Ideally, we want a way to express a value that tells us when it changes. That&#39;s what Signals do.</p>\n<p>At its core, a signal is an object with a <code>.value</code> property that holds a value. This has an important characteristic: a signal&#39;s value can change, but the signal itself always stays the same:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Read a signal’s value by accessing .value:</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// Update a signal’s value:</span>\ncount<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The signal's value has changed:</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span></code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgc2lnbmFsIH0gZnJvbSAiQHByZWFjdC9zaWduYWxzIjsKCmNvbnN0IGNvdW50ID0gc2lnbmFsKDApOwoKLy8gUmVhZCBhIHNpZ25hbOKAmXMgdmFsdWUgYnkgYWNjZXNzaW5nIC52YWx1ZToKY29uc29sZS5sb2coY291bnQudmFsdWUpOyAgIC8vIDAKCi8vIFVwZGF0ZSBhIHNpZ25hbOKAmXMgdmFsdWU6CmNvdW50LnZhbHVlICs9IDE7CgovLyBUaGUgc2lnbmFsJ3MgdmFsdWUgaGFzIGNoYW5nZWQ6CmNvbnNvbGUubG9nKGNvdW50LnZhbHVlKTsgIC8vIDE%3D\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t<p>In Preact, when a signal is passed down through a tree as props or context, we&#39;re only passing around references to the signal. The signal can be updated without re-rendering any components, since components see the signal and not its value. This lets us skip all of the expensive rendering work and jump immediately to any components in the tree that actually access the signal&#39;s <code>.value</code> property.</p>\n<p>Signals have a second important characteristic, which is that they track when their value is accessed and when it is updated. In Preact, accessing a signal&#39;s <code>.value</code> property from within a component automatically re-renders the component when that signal&#39;s value changes.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a signal that can be subscribed to:</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Accessing .value in a component automatically re-renders when it changes:</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// A signal is updated by assigning to the `.value` property:</span>\n    count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Count: </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAicHJlYWN0IjsKCmltcG9ydCB7IHNpZ25hbCB9IGZyb20gIkBwcmVhY3Qvc2lnbmFscyI7CgovLyBDcmVhdGUgYSBzaWduYWwgdGhhdCBjYW4gYmUgc3Vic2NyaWJlZCB0bzoKY29uc3QgY291bnQgPSBzaWduYWwoMCk7CgpmdW5jdGlvbiBDb3VudGVyKCkgewogIC8vIEFjY2Vzc2luZyAudmFsdWUgaW4gYSBjb21wb25lbnQgYXV0b21hdGljYWxseSByZS1yZW5kZXJzIHdoZW4gaXQgY2hhbmdlczoKICBjb25zdCB2YWx1ZSA9IGNvdW50LnZhbHVlOwoKICBjb25zdCBpbmNyZW1lbnQgPSAoKSA9PiB7CiAgICAvLyBBIHNpZ25hbCBpcyB1cGRhdGVkIGJ5IGFzc2lnbmluZyB0byB0aGUgYC52YWx1ZWAgcHJvcGVydHk6CiAgICBjb3VudC52YWx1ZSsrOwogIH0KCiAgcmV0dXJuICgKICAgIDxkaXY%2BCiAgICAgIDxwPkNvdW50OiB7dmFsdWV9PC9wPgogICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlbWVudH0%2BY2xpY2sgbWU8L2J1dHRvbj4KICAgIDwvZGl2PgogICk7Cn0KCnJlbmRlcig8Q291bnRlciAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFwcCIpKTsK\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t<p>Finally, Signals are deeply integrated into Preact to provide the best possible performance and ergonomics. In the example above, we accessed <code>count.value</code> to retrieve the current value of the <code>count</code> signal, however this is unnecessary. Instead, we can let Preact do all of the work for us by using the <code>count</code> signal directly in JSX:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Count: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAicHJlYWN0IjsKCmltcG9ydCB7IHNpZ25hbCB9IGZyb20gIkBwcmVhY3Qvc2lnbmFscyI7Cgpjb25zdCBjb3VudCA9IHNpZ25hbCgwKTsKCmZ1bmN0aW9uIENvdW50ZXIoKSB7CiAgcmV0dXJuICgKICAgIDxkaXY%2BCiAgICAgIDxwPkNvdW50OiB7Y291bnR9PC9wPgogICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0%2BIGNvdW50LnZhbHVlKyt9PmNsaWNrIG1lPC9idXR0b24%2BCiAgICA8L2Rpdj4KICApOwp9CgpyZW5kZXIoPENvdW50ZXIgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhcHAiKSk7Cg%3D%3D\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"installation\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#installation\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Installation (#installation)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Installation</span>\n\t\t\t\t</h2><p>Signals can be installed by adding the <code>@preact/signals</code> package to your project:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @preact/signals</code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Once installed via your package manager of choice, you&#39;re ready to import it in your app.</p>\n\n\t\t\t\t<h2 id=\"usage-example\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#usage-example\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Usage Example (#usage-example)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Usage Example</span>\n\t\t\t\t</h2><p>Let&#39;s use signals in a real world scenario. We&#39;re going to build a todo list app, where you can add and remove items in a todo list. We&#39;ll start by modeling the state. We&#39;re going to need a signal that holds a list of todos first, which we can represent with an <code>Array</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Buy groceries\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Walk the dog\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>To let the user enter text for a new todo item, we&#39;ll need one more signal that we&#39;ll connect up to an <code>&lt;input&gt;</code> element shortly. For now, we can use this signal already to create a function that adds a todo item to our list. Remember, we can update a signal&#39;s value by assigning to its <code>.value</code> property:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// We'll use this for our input later</span>\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  todos<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> text<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clear input value on add</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p>💡 Tip: A signal will only update if you assign a new value to it. If the value you assign to a signal is equal to its current value, it won&#39;t update.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncount<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// does nothing - value is already 0</span>\n\ncount<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// updates - value is different</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</blockquote>\n<p>Let&#39;s check if our logic is correct so far. When we update the <code>text</code> signal and call <code>addTodo()</code>, we should see a new item being added to the <code>todos</code> signal. We can simulate this scenario by calling these functions directly - no need for a user interface yet!</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Buy groceries\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Walk the dog\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  todos<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> text<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reset input value on add</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Check if our logic works</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs: [{text: \"Buy groceries\"}, {text: \"Walk the dog\"}]</span>\n\n\n<span class=\"token comment\">// Simulate adding a new todo</span>\ntext<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Tidy up\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Check that it added the new item and cleared the `text` signal:</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs: [{text: \"Buy groceries\"}, {text: \"Walk the dog\"}, {text: \"Tidy up\"}]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Logs: \"\"</span></code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgc2lnbmFsIH0gZnJvbSAiQHByZWFjdC9zaWduYWxzIjsKCmNvbnN0IHRvZG9zID0gc2lnbmFsKFsKICB7IHRleHQ6ICJCdXkgZ3JvY2VyaWVzIiB9LAogIHsgdGV4dDogIldhbGsgdGhlIGRvZyIgfSwKXSk7Cgpjb25zdCB0ZXh0ID0gc2lnbmFsKCIiKTsKCmZ1bmN0aW9uIGFkZFRvZG8oKSB7CiAgdG9kb3MudmFsdWUgPSBbLi4udG9kb3MudmFsdWUsIHsgdGV4dDogdGV4dC52YWx1ZSB9XTsKICB0ZXh0LnZhbHVlID0gIiI7IC8vIFJlc2V0IGlucHV0IHZhbHVlIG9uIGFkZAp9CgovLyBDaGVjayBpZiBvdXIgbG9naWMgd29ya3MKY29uc29sZS5sb2codG9kb3MudmFsdWUpOwovLyBMb2dzOiBbe3RleHQ6ICJCdXkgZ3JvY2VyaWVzIn0sIHt0ZXh0OiAiV2FsayB0aGUgZG9nIn1dCgoKLy8gU2ltdWxhdGUgYWRkaW5nIGEgbmV3IHRvZG8KdGV4dC52YWx1ZSA9ICJUaWR5IHVwIjsKYWRkVG9kbygpOwoKLy8gQ2hlY2sgdGhhdCBpdCBhZGRlZCB0aGUgbmV3IGl0ZW0gYW5kIGNsZWFyZWQgdGhlIGB0ZXh0YCBzaWduYWw6CmNvbnNvbGUubG9nKHRvZG9zLnZhbHVlKTsKLy8gTG9nczogW3t0ZXh0OiAiQnV5IGdyb2NlcmllcyJ9LCB7dGV4dDogIldhbGsgdGhlIGRvZyJ9LCB7dGV4dDogIlRpZHkgdXAifV0KCmNvbnNvbGUubG9nKHRleHQudmFsdWUpOyAgLy8gTG9nczogIiI%3D\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t<p>The last feature we&#39;d like to add is the ability to remove a todo item from the list. For this, we&#39;ll add a function that deletes a given todo item from the todos array:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeTodo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  todos<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t <span class=\"token operator\">!==</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"building-the-ui\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#building-the-ui\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Building the UI (#building-the-ui)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Building the UI</span>\n\t\t\t\t</h2><p>Now that we&#39;ve modeled our application&#39;s state, it&#39;s time to wire in up to a nice UI that users can interact with.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onInput</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onInput</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>addTodo<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token string\">' '</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">removeTodo</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">❌</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>And with that we have a fully working todo app! You can try out the full app <a href=\"/repl?example=todo-signals\">over here</a> 🎉</p>\n\n\t\t\t\t<h2 id=\"deriving-state-via-computed-signals\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#deriving-state-via-computed-signals\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Deriving state via computed signals (#deriving-state-via-computed-signals)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Deriving state via computed signals</span>\n\t\t\t\t</h2><p>Let&#39;s add one more feature to our todo app: each todo item can be checked off as completed, and we&#39;ll show the user the number of items they&#39;ve completed. To do that we&#39;ll import the <a href=\"#computedfn\">`computed(fn)`</a> function, which lets us create a new signal that is computed based on the values of other signals. The returned computed signal is read-only, and its value is automatically updated when any signals accessed from within the callback function change.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal<span class=\"token punctuation\">,</span> computed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Buy groceries\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Walk the dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a signal computed from other signals</span>\n<span class=\"token keyword\">const</span> completed <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// When `todos` changes, this re-runs automatically:</span>\n  <span class=\"token keyword\">return</span> todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Logs: 1, because one todo is marked as being completed</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>completed<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgc2lnbmFsLCBjb21wdXRlZCB9IGZyb20gIkBwcmVhY3Qvc2lnbmFscyI7Cgpjb25zdCB0b2RvcyA9IHNpZ25hbChbCiAgeyB0ZXh0OiAiQnV5IGdyb2NlcmllcyIsIGNvbXBsZXRlZDogdHJ1ZSB9LAogIHsgdGV4dDogIldhbGsgdGhlIGRvZyIsIGNvbXBsZXRlZDogZmFsc2UgfSwKXSk7CgovLyBjcmVhdGUgYSBzaWduYWwgY29tcHV0ZWQgZnJvbSBvdGhlciBzaWduYWxzCmNvbnN0IGNvbXBsZXRlZCA9IGNvbXB1dGVkKCgpID0%2BIHsKICAvLyBXaGVuIGB0b2Rvc2AgY2hhbmdlcywgdGhpcyByZS1ydW5zIGF1dG9tYXRpY2FsbHk6CiAgcmV0dXJuIHRvZG9zLnZhbHVlLmZpbHRlcih0b2RvID0%2BIHRvZG8uY29tcGxldGVkKS5sZW5ndGg7Cn0pOwoKLy8gTG9nczogMSwgYmVjYXVzZSBvbmUgdG9kbyBpcyBtYXJrZWQgYXMgYmVpbmcgY29tcGxldGVkCmNvbnNvbGUubG9nKGNvbXBsZXRlZC52YWx1ZSk7\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t<p>Our simple todo list app doesn&#39;t need many computed signals, but more complex apps tend to rely on computed() to avoid duplicating state in multiple places.</p>\n<blockquote>\n<p>💡 Tip: Deriving as much state as possible ensures that your state always has a single source of truth. It is a key principle of signals. This makes debugging a lot easier in case there is a flaw in application logic later on, as there are less places to worry about.</p>\n</blockquote>\n\n\t\t\t\t<h2 id=\"managing-global-app-state\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#managing-global-app-state\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Managing global app state (#managing-global-app-state)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Managing global app state</span>\n\t\t\t\t</h2><p>Up until now, we&#39;ve only created signals outside the component tree. This is fine for a small app like a todo list, but for larger and more complex apps this can make testing difficult. Tests typically involve changing values in your app state to reproduce a certain scenario, then passing that state to components and asserting on the rendered HTML. To do this, we can extract our todo list state into a function:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">createAppState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> completed <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> todos<span class=\"token punctuation\">,</span> completed <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p>💡 Tip: Notice that we&#39;re consciously not including the <code>addTodo()</code> and <code>removeTodo(todo)</code> functions here. Separating data from functions that modify it often helps simplify application architecture. For more details, check out <a href=\"https://en.wikipedia.org/wiki/Data-oriented_design\" target=\"_blank\" rel=\"noopener noreferrer\">data-oriented design</a>.</p>\n</blockquote>\n<p>We can now pass our todo application state as a prop when rendering:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">createAppState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...later:</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoList</span></span> <span class=\"token attr-name\">state</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>This works in our todo list app because the state is global, however larger apps typically end up with multiple components that require access to the same pieces of state. This usually involves &quot;lifting state up&quot; to a common shared ancestor component. To avoid passing state manually through each component via props, the state can be placed into <a href=\"/guide/v10/context\">Context</a> so any component in the tree can access it. Here is a quick example of how that typically looks:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"preact\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"preact/hooks\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createAppState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./my-app-state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> AppState <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AppState.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createAppState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AppState.Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...later when you need access to your app state</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>AppState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>If you want to learn more about how context works, head over to the <a href=\"/guide/v10/context\">Context documentation</a>.</p>\n\n\t\t\t\t<h2 id=\"local-state-with-signals\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#local-state-with-signals\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Local state with signals (#local-state-with-signals)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Local state with signals</span>\n\t\t\t\t</h2><p>The majority of application state ends up being passed around using props and context. However, there are many scenarios where components have their own internal state that is specific to that component. Since there is no reason for this state to live as part of the app&#39;s global business logic, it should be confined to the component that needs it. In these scenarios, we can create signals as well as computed signals directly within components using the <code>useSignal()</code> and <code>useComputed()</code> hooks:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSignal<span class=\"token punctuation\">,</span> useComputed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useSignal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> double <span class=\"token operator\">=</span> <span class=\"token function\">useComputed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> x 2 = </span><span class=\"token punctuation\">{</span>double<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Those two hooks are thin wrappers around <a href=\"#signalinitialvalue\">`signal()`</a> and <a href=\"#computedfn\">`computed()`</a> that construct a signal the first time a component runs, and simply use that same signal on subsequent renders.</p>\n<blockquote>\n<p>💡 Behind the scenes, this is the implementation:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useSignal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</blockquote>\n\n\t\t\t\t<h2 id=\"advanced-signals-usage\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#advanced-signals-usage\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Advanced signals usage (#advanced-signals-usage)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Advanced signals usage</span>\n\t\t\t\t</h2><p>The topics we&#39;ve covered so far are all you need to get going. The following section is aimed at readers who want to benefit even more by modeling their application state entirely using signals.</p>\n\n\t\t\t\t<h3 id=\"reacting-to-signals-outside-of-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#reacting-to-signals-outside-of-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Reacting to signals outside of components (#reacting-to-signals-outside-of-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Reacting to signals outside of components</span>\n\t\t\t\t</h3><p>When working with signals outside of the component tree, you may have noticed that computed signals don&#39;t re-compute unless you actively read their value. This is because signals are lazy by default: they only compute new values when their value has been accessed.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> double <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Despite updating the `count` signal on which the `double` signal depends,</span>\n<span class=\"token comment\">// `double` does not yet update because nothing has used its value.</span>\ncount<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Reading the value of `double` triggers it to be re-computed:</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Logs: 2</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>This poses a question: how can we subscribe to signals outside of the component tree? Perhaps we want to log something to the console whenever a signal&#39;s value changes, or persist state to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" target=\"_blank\" rel=\"noopener noreferrer\">LocalStorage</a>.</p>\n<p>To run arbitrary code in response to signal changes, we can use <a href=\"#effectfn\">`effect(fn)`</a>. Similar to computed signals, effects track which signals are accessed and re-run their callback when those signals change. Unlike computed signals, <a href=\"#effectfn\">`effect()`</a> does not return a signal - it&#39;s the end of a sequence of changes.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal<span class=\"token punctuation\">,</span> computed<span class=\"token punctuation\">,</span> effect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> surname <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fullName <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>surname<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Logs name every time it changes:</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs: \"Jane Doe\"</span>\n\n<span class=\"token comment\">// Updating `name` updates `fullName`, which triggers the effect again:</span>\nname<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs: \"John Doe\"</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Optionally, you can return a cleanup function from the callback provided to <a href=\"#effectfn\">`effect()`</a> that will be run before the next update takes place. This allows you to &quot;clean up&quot; the side effect and potentially reset any state for the subsequent trigger of the callback.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Chat<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Chat<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>You can destroy an effect and unsubscribe from all signals it accessed by calling the returned function.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal<span class=\"token punctuation\">,</span> effect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> surname <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fullName <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> surname<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dispose <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs: \"Jane Doe\"</span>\n\n<span class=\"token comment\">// Destroy effect and subscriptions:</span>\n<span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Updating `name` does not run the effect because it has been disposed.</span>\n<span class=\"token comment\">// It also doesn't re-compute `fullName` now that nothing is observing it.</span>\nname<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p>💡 Tip: Don&#39;t forget to clean up effects if you&#39;re using them extensively. Otherwise your app will consume more memory than needed.</p>\n</blockquote>\n\n\t\t\t\t<h2 id=\"reading-signals-without-subscribing-to-them\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#reading-signals-without-subscribing-to-them\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Reading signals without subscribing to them (#reading-signals-without-subscribing-to-them)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Reading signals without subscribing to them</span>\n\t\t\t\t</h2><p>On the rare occasion that you need to write to a signal inside <a href=\"#effectfn\">`effect(fn)`</a>, but don&#39;t want the effect to re-run when that signal changes,\nyou can use <code>.peek()</code> to get the signal&#39;s current value without subscribing.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> delta <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Update `count` without subscribing to `count`:</span>\n  count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Setting `delta` reruns the effect:</span>\ndelta<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This won't rerun the effect because it didn't access `.value`:</span>\ncount<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p>💡 Tip: The scenarios in which you don&#39;t want to subscribe to a signal are rare. In most cases you want your effect to subscribe to all signals. Only use <code>.peek()</code> when you really need to.</p>\n</blockquote>\n<p>As an alternative to <code>.peek()</code>, we have the <code>untracked</code> function which receives a function as an argument and returns the outcome of the function. In <code>untracked</code> you can\nreference any signal with <code>.value</code> without creating a subscription. This can come in handy when you have a reusable function that accesses <code>.value</code> or you need to access\nmore than 1 signal.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> delta <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Update `count` without subscribing to `count` or `delta`:</span>\n  count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token function\">untracked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">.</span>value\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"combining-multiple-updates-into-one\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#combining-multiple-updates-into-one\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Combining multiple updates into one (#combining-multiple-updates-into-one)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Combining multiple updates into one</span>\n\t\t\t\t</h2><p>Remember the <code>addTodo()</code> function we used earlier in our todo app? Here is a refresher on what it looked like:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  todos<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> text<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Notice that the function triggers two separate updates: one when setting <code>todos.value</code> and the other when setting the value of <code>text</code>. This can sometimes be undesirable and warrant combining both updates into one, for performance or other reasons. The <a href=\"#batchfn\">`batch(fn)`</a> function can be used to combine multiple value updates into one &quot;commit&quot; at the end of the callback:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">batch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    todos<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>todos<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> text<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Accessing a signal that has been modified within a batch will reflect its updated value. Accessing a computed signal that has been invalidated by another signal within a batch will re-compute only the necessary dependencies to return an up-to-date value for that computed signal. Any other invalidated signals remain unaffected and are only updated at the end of the batch callback.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal<span class=\"token punctuation\">,</span> computed<span class=\"token punctuation\">,</span> effect<span class=\"token punctuation\">,</span> batch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> double <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> triple <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> triple<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">batch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// set `count`, invalidating `double` and `triple`:</span>\n  count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Despite being batched, `double` reflects the new computed value.</span>\n  <span class=\"token comment\">// However, `triple` will only update once the callback completes.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Logs: 2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgc2lnbmFsLCBjb21wdXRlZCwgZWZmZWN0LCBiYXRjaCB9IGZyb20gIkBwcmVhY3Qvc2lnbmFscyI7Cgpjb25zdCBjb3VudCA9IHNpZ25hbCgwKTsKY29uc3QgZG91YmxlID0gY29tcHV0ZWQoKCkgPT4gY291bnQudmFsdWUgKiAyKTsKY29uc3QgdHJpcGxlID0gY29tcHV0ZWQoKCkgPT4gY291bnQudmFsdWUgKiAzKTsKCmVmZmVjdCgoKSA9PiBjb25zb2xlLmxvZyhkb3VibGUudmFsdWUsIHRyaXBsZS52YWx1ZSkpOwoKYmF0Y2goKCkgPT4gewogIC8vIHNldCBgY291bnRgLCBpbnZhbGlkYXRpbmcgYGRvdWJsZWAgYW5kIGB0cmlwbGVgOgogIGNvdW50LnZhbHVlID0gMTsKCiAgLy8gRGVzcGl0ZSBiZWluZyBiYXRjaGVkLCBgZG91YmxlYCByZWZsZWN0cyB0aGUgbmV3IGNvbXB1dGVkIHZhbHVlLgogIC8vIEhvd2V2ZXIsIGB0cmlwbGVgIHdpbGwgb25seSB1cGRhdGUgb25jZSB0aGUgY2FsbGJhY2sgY29tcGxldGVzLgogIGNvbnNvbGUubG9nKGRvdWJsZS52YWx1ZSk7IC8vIExvZ3M6IDIKfSk7\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p>💡 Tip: Batches can also be nested, in which case batched updates are flushed only after the outermost batch callback has completed.</p>\n</blockquote>\n\n\t\t\t\t<h3 id=\"rendering-optimizations\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#rendering-optimizations\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Rendering optimizations (#rendering-optimizations)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Rendering optimizations</span>\n\t\t\t\t</h3><p>With signals we can bypass Virtual DOM rendering and bind signal changes directly to DOM mutations. If you pass a signal into JSX in a text position, it will render as text and automatically update in-place without Virtual DOM diffing:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Unoptimized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Re-renders the component when `count` changes:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Optimized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Text automatically updates without re-rendering the component:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>To enable this optimization, pass the signal into JSX instead of accessing its <code>.value</code> property.</p>\n<p>A similar rendering optimization is also supported when passing signals as props on DOM elements.</p>\n\n\t\t\t\t<h2 id=\"api\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#api\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: API (#api)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>API</span>\n\t\t\t\t</h2><p>This section is an overview of the signals API. It&#39;s aimed to be a quick reference for folks who already know how to use signals and need a reminder of what&#39;s available.</p>\n\n\t\t\t\t<h3 id=\"signalinitialvalue\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#signalinitialvalue\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: signal(initialValue) (#signalinitialvalue)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>signal(initialValue)</span>\n\t\t\t\t</h3><p>Creates a new signal with the given argument as its initial value:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>When creating signals within a component, use the hook variant: <code>useSignal(initialValue)</code>.</p>\n<p>The returned signal has a <code>.value</code> property that can be get or set to read and write its value. To read from a signal without subscribing to it, use <code>signal.peek()</code>.</p>\n\n\t\t\t\t<h3 id=\"computedfn\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#computedfn\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: computed(fn) (#computedfn)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>computed(fn)</span>\n\t\t\t\t</h3><p>Creates a new signal that is computed based on the values of other signals. The returned computed signal is read-only, and its value is automatically updated when any signals accessed from within the callback function change.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> surname <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fullName <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>surname<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>When creating computed signals within a component, use the hook variant: <code>useComputed(fn)</code>.</p>\n\n\t\t\t\t<h3 id=\"effectfn\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#effectfn\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: effect(fn) (#effectfn)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>effect(fn)</span>\n\t\t\t\t</h3><p>To run arbitrary code in response to signal changes, we can use <code>effect(fn)</code>. Similar to computed signals, effects track which signals are accessed and re-run their callback when those signals change. If the callback returns a function, this function will be run before the next value update. Unlike computed signals, <code>effect()</code> does not return a signal - it&#39;s the end of a sequence of changes.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Log to console when `name` changes:</span>\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs: \"Hello Jane\"</span>\n\nname<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs: \"Hello John\"</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>When responding to signal changes within a component, use the hook variant: <code>useSignalEffect(fn)</code>.</p>\n\n\t\t\t\t<h3 id=\"batchfn\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#batchfn\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: batch(fn) (#batchfn)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>batch(fn)</span>\n\t\t\t\t</h3><p>The <code>batch(fn)</code> function can be used to combine multiple value updates into one &quot;commit&quot; at the end of the provided callback. Batches can be nested and changes are only flushed once the outermost batch callback completes. Accessing a signal that has been modified within a batch will reflect its updated value.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> surname <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Combine both writes into one update</span>\n<span class=\"token function\">batch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\n  surname<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"untrackedfn\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#untrackedfn\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: untracked(fn) (#untrackedfn)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>untracked(fn)</span>\n\t\t\t\t</h3><p>The <code>untracked(fn)</code> function can be used to access the value of several signals without subscribing to them.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> surname <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">untracked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>surname<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t"}