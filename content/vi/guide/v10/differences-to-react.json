{"meta":{"title":"Differences to React","description":"What are the differences between Preact and React. This document describes them in detail","toc":[{"text":"Differences to React","id":"differences-to-react","level":1},{"text":"Main differences","id":"main-differences","level":2},{"text":"Version Compatibility","id":"version-compatibility","level":2},{"text":"Debug messages and errors","id":"debug-messages-and-errors","level":2},{"text":"Features unique to Preact","id":"features-unique-to-preact","level":2},{"text":"Native support for ES Modules","id":"native-support-for-es-modules","level":3},{"text":"Arguments in `Component.render()`","id":"arguments-in-componentrender","level":3},{"text":"Raw HTML attribute/property names","id":"raw-html-attributeproperty-names","level":3},{"text":"SVG inside JSX","id":"svg-inside-jsx","level":3},{"text":"Use `onInput` instead of `onChange`","id":"use-oninput-instead-of-onchange","level":3},{"text":"JSX Constructor","id":"jsx-constructor","level":3},{"text":"No contextTypes needed","id":"no-contexttypes-needed","level":3},{"text":"Features exclusive to `preact/compat`","id":"features-exclusive-to-preactcompat","level":2},{"text":"Children API","id":"children-api","level":3},{"text":"Specialised Components","id":"specialised-components","level":3}]},"html":"<h1>Differences to React</h1><p>Preact is not intended to be a reimplementation of React. There are differences. Many of these differences are trivial, or can be completely removed by using <a href=\"/guide/v10/switching-to-preact\">preact/compat</a>, which is a thin layer over Preact that attempts to achieve 100% compatibility with React.</p>\n<p>The reason Preact does not attempt to include every single feature of React is in order to remain <strong>small</strong> and <strong>focused</strong> - otherwise it would make more sense to simply submit optimizations to the React project, which is already a very complex and well-architected codebase.</p>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"main-differences\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#main-differences\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Main differences (#main-differences)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Main differences</span>\n\t\t\t\t</h2><p>The main difference between Preact and React is that Preact does not implement a synthetic event system for size and performance reasons. Preact uses the browser&#39;s standard <code>addEventListener</code> to register event handlers, which means event naming and behavior works the same in Preact as it does in plain JavaScript / DOM. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\" target=\"_blank\" rel=\"noopener noreferrer\">MDN's Event Reference</a> for a full list of DOM event handlers.</p>\n<p>Standard browser events work very similarly to how events work in React, with a few small differences. In Preact:</p>\n<ul>\n<li>events don&#39;t bubble up through <code>&lt;Portal&gt;</code> components</li>\n<li>standard <code>onInput</code> should be used instead of React&#39;s <code>onChange</code> for form inputs (<strong>only if <code>preact/compat</code> is not used</strong>)</li>\n<li>standard <code>onDblClick</code> should be used instead of React&#39;s <code>onDoubleClick</code> (<strong>only if <code>preact/compat</code> is not used</strong>)</li>\n<li><code>onSearch</code> should generally be used for <code>&lt;input type=&quot;search&quot;&gt;</code>, since the clear &quot;x&quot; button does not fire <code>onInput</code> in IE11</li>\n</ul>\n<p>Another notable difference is that Preact follows the DOM specification more closely. Custom elements are supported like any other element, and custom events are supported with case-sensitive names (as they are in the DOM).</p>\n\n\t\t\t\t<h2 id=\"version-compatibility\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#version-compatibility\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Version Compatibility (#version-compatibility)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Version Compatibility</span>\n\t\t\t\t</h2><p>For both preact and <a href=\"/guide/v10/switching-to-preact\">preact/compat</a>, version compatibility is measured against the <em>current</em> and <em>previous</em> major releases of React. When new features are announced by the React team, they may be added to Preact&#39;s core if it makes sense given the <a href=\"/about/project-goals\">Project Goals</a>. This is a fairly democratic process, constantly evolving through discussion and decisions made in the open, using issues and pull requests.</p>\n<blockquote>\n<p>Thus, the website and documentation reflect React <code>15.x</code> through <code>17.x</code>, with some <code>18.x</code> and <code>19.x</code> additions, when discussing compatibility or making comparisons.</p>\n</blockquote>\n\n\t\t\t\t<h2 id=\"debug-messages-and-errors\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#debug-messages-and-errors\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Debug messages and errors (#debug-messages-and-errors)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Debug messages and errors</span>\n\t\t\t\t</h2><p>Our flexible architecture allows addons to enhance the Preact experience in any way they want. One of those addons is <code>preact/debug</code> which adds <a href=\"/guide/v10/debugging\">helpful warnings and errors</a> and attaches the <a href=\"https://preactjs.github.io/preact-devtools/\" target=\"_blank\" rel=\"noopener noreferrer\">Preact Developer Tools</a> browser extension, if installed. Those guide you when developing Preact applications and make it a lot easier to inspect what&#39;s going on. You can enable them by adding the relevant import statement:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"preact/debug\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- Add this line at the top of your main entry file</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>This is different from React which requires a bundler being present that strips out debugging messages at build time by checking for <code>NODE_ENV != &quot;production&quot;</code>.</p>\n\n\t\t\t\t<h2 id=\"features-unique-to-preact\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#features-unique-to-preact\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Features unique to Preact (#features-unique-to-preact)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Features unique to Preact</span>\n\t\t\t\t</h2><p>Preact actually adds a few convenient features inspired by work in the (P)React community:</p>\n\n\t\t\t\t<h3 id=\"native-support-for-es-modules\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#native-support-for-es-modules\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Native support for ES Modules (#native-support-for-es-modules)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Native support for ES Modules</span>\n\t\t\t\t</h3><p>Preact was built with ES Modules in mind from the beginning, and was one of the first frameworks to support them. You can load Preact via the <code>import</code> keyword directly in browsers without having it to pass through a bundler first.</p>\n\n\t\t\t\t<h3 id=\"arguments-in-componentrender\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#arguments-in-componentrender\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Arguments in `Component.render()` (#arguments-in-componentrender)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Arguments in `Component.render()`</span>\n\t\t\t\t</h3><p>For convenience, we pass <code>this.props</code> and <code>this.state</code> to the <code>render()</code> method on class components. Take a look at this component which uses one prop and one state property.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// Works in both Preact and React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Name: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, Age: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>In Preact this can be also written like this:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// Only works in Preact</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> age <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Name: </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, Age: </span><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Both snippets render the exact same thing, render arguments are provided for convenience.</p>\n\n\t\t\t\t<h3 id=\"raw-html-attributeproperty-names\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#raw-html-attributeproperty-names\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Raw HTML attribute/property names (#raw-html-attributeproperty-names)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Raw HTML attribute/property names</span>\n\t\t\t\t</h3><p>Preact aims to closely match the DOM specification supported by all major browsers. When applying <code>props</code> to an element, Preact <em>detects</em> whether each prop should be set as a property or HTML attribute. This makes it possible to set complex properties on Custom Elements, but it also means you can use attribute names like <code>class</code> in JSX:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// This:</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">// ...is the same as:</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Most Preact developers prefer to use <code>class</code> instead of <code>className</code> as it&#39;s shorter to write but both are supported.</p>\n\n\t\t\t\t<h3 id=\"svg-inside-jsx\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#svg-inside-jsx\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: SVG inside JSX (#svg-inside-jsx)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>SVG inside JSX</span>\n\t\t\t\t</h3><p>SVG is pretty interesting when it comes to the names of its properties and attributes. Some properties (and their attributes) on SVG objects are camelCased (e.g. <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath#Attributes\" target=\"_blank\" rel=\"noopener noreferrer\">clipPathUnits on a clipPath element</a>), some attributes are kebab-case (e.g. <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/Presentation\" target=\"_blank\" rel=\"noopener noreferrer\">clip-path on many SVG elements</a>), and other attributes (usually ones inherited from the DOM, e.g. <code>oninput</code>) are all lowercase.</p>\n<p>Preact applies SVG attributes as-written. This means you can copy and paste unmodified SVG snippets right into your code and have them work out of the box. This allows greater interoperability with tools designers tend to use to generate icons or SVG illustrations.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// React</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 48 48<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">strokeWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">strokeLinejoin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>24<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>24<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// Preact (note stroke-width and stroke-linejoin)</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 48 48<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-linejoin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>24<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>24<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>If you&#39;re coming from React, you may be used to specifying all attributes in camelCase. You can continue to use always-camelCase SVG attribute names by adding <a href=\"/guide/v10/switching-to-preact\">preact/compat</a> to your project, which mirrors the React API and normalizes these attributes.</p>\n\n\t\t\t\t<h3 id=\"use-oninput-instead-of-onchange\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#use-oninput-instead-of-onchange\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Use `onInput` instead of `onChange` (#use-oninput-instead-of-onchange)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Use `onInput` instead of `onChange`</span>\n\t\t\t\t</h3><p>Largely for historical reasons, the semantics of React&#39;s <code>onChange</code> event are actually the same as the <code>onInput</code> event provided by browsers, which is supported everywhere. The <code>input</code> event is the best-suited event for the majority of cases where you want to react when a form control is modified. In Preact core, <code>onChange</code> is the standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event\" target=\"_blank\" rel=\"noopener noreferrer\">DOM change event</a> that gets fired when an element&#39;s value is <em>committed</em> by the user.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// React</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">// Preact</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onInput</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>If you&#39;re using <a href=\"/guide/v10/switching-to-preact\">preact/compat</a>, most <code>onChange</code> events are internally converted to <code>onInput</code> to emulate React&#39;s behavior. This is one of the tricks we use to ensure maximum compatibility with the React ecosystem.</p>\n\n\t\t\t\t<h3 id=\"jsx-constructor\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#jsx-constructor\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: JSX Constructor (#jsx-constructor)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>JSX Constructor</span>\n\t\t\t\t</h3><p>JSX is a syntax extension for JavaScript that is converted to nested function calls. The idea of using these nested calls to build up tree structures long predates JSX, and was previously popularized in JavaScript by the <a href=\"https://github.com/dominictarr/hyperscript\" target=\"_blank\" rel=\"noopener noreferrer\">hyperscript</a> project. This approach has value well beyond the scope of the React ecosystem, so Preact promotes the original generalized community-standard. For a more in-depth discussion of JSX and its relationship to Hyperscript, <a href=\"https://jasonformat.com/wtf-is-jsx\" target=\"_blank\" rel=\"noopener noreferrer\">read this article on how JSX works</a>.</p>\n<p><strong>Source:</strong> (JSX)</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p><strong>Output:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// Preact:</span>\n<span class=\"token function\">h</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span><span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// React:</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span><span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Ultimately, if you&#39;re looking at the generated output code for a Preact application, it&#39;s clear that a shorter un-namespaced &quot;JSX pragma&quot; is both easier to read <em>and</em> more suitable for optimizations like minification. In most Preact apps you&#39;ll encounter <code>h()</code>, though it doesn&#39;t really matter which name you use since a <code>createElement</code> alias export is also provided.</p>\n\n\t\t\t\t<h3 id=\"no-contexttypes-needed\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#no-contexttypes-needed\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: No contextTypes needed (#no-contexttypes-needed)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>No contextTypes needed</span>\n\t\t\t\t</h3><p>The legacy <code>Context</code> API requires Components to declare specific properties using React&#39;s <code>contextTypes</code> or <code>childContextTypes</code> in order to receive those values. Preact does not have this requirement: all Components receive all <code>context</code> properties produced by <code>getChildContext()</code> by default.</p>\n\n\t\t\t\t<h2 id=\"features-exclusive-to-preactcompat\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#features-exclusive-to-preactcompat\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Features exclusive to `preact/compat` (#features-exclusive-to-preactcompat)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Features exclusive to `preact/compat`</span>\n\t\t\t\t</h2><p><code>preact/compat</code> is our <strong>compat</strong>ibility layer that translates React code to Preact. For existing React users this can be an easy way to try out Preact without changing any of your code, by <a href=\"/guide/v10/getting-started#aliasing-react-to-preact\">setting up a few aliases</a> in your bundler configuration.</p>\n\n\t\t\t\t<h3 id=\"children-api\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#children-api\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Children API (#children-api)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Children API</span>\n\t\t\t\t</h3><p>The <code>Children</code> API is a specialized set of methods for working with the value of <code>props.children</code>. For Preact this is generally unnecessary, and we recommend using the built-in array methods instead. In Preact, <code>props.children</code> is either a Virtual DOM node, an empty value like <code>null</code>, or an Array of Virtual DOM nodes. The first two cases are the simplest and most common, since it&#39;s possible to use or return <code>children</code> as-is:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// React:</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span> <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Preact: use props.children directly:</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span> <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>For specialized cases where you need to iterate over the children passed to a component, Preact provides a <code>toChildArray()</code> method that accepts any <code>props.children</code> value and returns a flattened and normalized Array of Virtual DOM nodes.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// React</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cols <span class=\"token operator\">=</span> Children<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-columns</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>cols<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Preact</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cols <span class=\"token operator\">=</span> <span class=\"token function\">toChildArray</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-columns</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>cols<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>A React-compatible <code>Children</code> API is available from <code>preact/compat</code> to make integration with existing component libraries seamless.</p>\n\n\t\t\t\t<h3 id=\"specialised-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#specialised-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Specialised Components (#specialised-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Specialised Components</span>\n\t\t\t\t</h3><p><a href=\"/guide/v10/switching-to-preact\">preact/compat</a> ships with specialised components that are not necessary for every app. These include</p>\n<ul>\n<li><a href=\"/guide/v10/switching-to-preact#purecomponent\">PureComponent</a>: Only updates if <code>props</code> or <code>state</code> have changed</li>\n<li><a href=\"/guide/v10/switching-to-preact#memo\">memo</a>: Similar in spirit to <code>PureComponent</code> but allows to use a custom comparison function</li>\n<li><a href=\"/guide/v10/switching-to-preact#forwardref\">forwardRef</a>: Supply a <code>ref</code> to a specified child component.</li>\n<li><a href=\"/guide/v10/switching-to-preact#portals\">Portals</a>: Continues rendering the current tree into a different DOM container</li>\n<li><a href=\"/guide/v10/switching-to-preact#suspense-experimental\">Suspense</a>: <strong>experimental</strong> Allows to display fallback content in case the tree is not ready</li>\n<li><a href=\"/guide/v10/switching-to-preact#suspense-experimental\">lazy</a>: <strong>experimental</strong> Lazy load async code and mark a tree as ready/not ready accordingly.</li>\n</ul>\n"}