{"meta":{"title":"API Reference","toc":[{"text":"API Reference","id":"api-reference","level":1},{"text":"Preact.Component","id":"preactcomponent","level":2},{"text":"`Component.render(props, state)`","id":"componentrenderprops-state","level":3},{"text":"Lifecycle methods","id":"lifecycle-methods","level":3},{"text":"`Preact.render()`","id":"preactrender","level":2},{"text":"`Preact.h()` / `Preact.createElement()`","id":"preacth--preactcreateelement","level":2}]},"html":"<h1>API Reference</h1><hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"preactcomponent\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#preactcomponent\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Preact.Component (#preactcomponent)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Preact.Component</span>\n\t\t\t\t</h2><p><code>Component</code> is a base class that you will usually subclass to create stateful Preact components.</p>\n\n\t\t\t\t<h3 id=\"componentrenderprops-state\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#componentrenderprops-state\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: `Component.render(props, state)` (#componentrenderprops-state)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>`Component.render(props, state)`</span>\n\t\t\t\t</h3><p>The <code>render()</code> function is required for all components. It can inspect the props and state of the component, and should return a Preact element or <code>null</code>.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// props === this.props</span>\n\t\t<span class=\"token comment\">// state === this.state</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"lifecycle-methods\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#lifecycle-methods\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Lifecycle methods (#lifecycle-methods)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Lifecycle methods</span>\n\t\t\t\t</h3><blockquote>\n<p><em><strong>Tip:</strong> If you&#39;ve used HTML5 Custom Elements, this is similar to the <code>attachedCallback</code> and <code>detachedCallback</code> lifecycle methods.</em></p>\n</blockquote>\n<p>Preact invokes the following lifecycle methods if they are defined for a Component:</p>\n<table>\n<thead>\n<tr>\n<th>Lifecycle method</th>\n<th>When it gets called</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>componentWillMount</code></td>\n<td>before the component gets mounted to the DOM</td>\n</tr>\n<tr>\n<td><code>componentDidMount</code></td>\n<td>after the component gets mounted to the DOM</td>\n</tr>\n<tr>\n<td><code>componentWillUnmount</code></td>\n<td>prior to removal from the DOM</td>\n</tr>\n<tr>\n<td><code>componentWillReceiveProps</code></td>\n<td>before new props get accepted</td>\n</tr>\n<tr>\n<td><code>shouldComponentUpdate</code></td>\n<td>before <code>render()</code>. Return <code>false</code> to skip render</td>\n</tr>\n<tr>\n<td><code>componentWillUpdate</code></td>\n<td>before <code>render()</code></td>\n</tr>\n<tr>\n<td><code>componentDidUpdate</code></td>\n<td>after <code>render()</code></td>\n</tr>\n</tbody></table>\n<p>All of the lifecycle methods and their parameters are shown in the following example component:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token comment\">// Previous props</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token comment\">// Previous state</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token comment\">// Previous props</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token comment\">// Previous state</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token comment\">// Current props</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token comment\">// Current state</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"preactrender\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#preactrender\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: `Preact.render()` (#preactrender)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>`Preact.render()`</span>\n\t\t\t\t</h2><p><code>render(component, containerNode, [replaceNode])</code></p>\n<p>Render a Preact component into the <code>containerNode</code> DOM node. Returns a reference to the rendered DOM node.</p>\n<p>If the optional <code>replaceNode</code> DOM node is provided and is a child of <code>containerNode</code>, Preact will update or replace that element using its diffing algorithm. Otherwise, Preact will append the rendered element to <code>containerNode</code>.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// These examples show how render() behaves in a page with the following markup:</span>\n<span class=\"token comment\">// &lt;div id=\"container\"></span>\n<span class=\"token comment\">//   &lt;h1>My App&lt;/h1></span>\n<span class=\"token comment\">// &lt;/div></span>\n\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Append MyComponent to container</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// &lt;div id=\"container\"></span>\n<span class=\"token comment\">//   &lt;h1>My App&lt;/h1></span>\n<span class=\"token comment\">//   &lt;MyComponent /></span>\n<span class=\"token comment\">// &lt;/div></span>\n\n<span class=\"token keyword\">const</span> existingNode <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> existingNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Diff MyComponent against &lt;h1>My App&lt;/h1></span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// &lt;div id=\"container\"></span>\n<span class=\"token comment\">//   &lt;MyComponent /></span>\n<span class=\"token comment\">// &lt;/div></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"preacth--preactcreateelement\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#preacth--preactcreateelement\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: `Preact.h()` / `Preact.createElement()` (#preacth--preactcreateelement)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>`Preact.h()` / `Preact.createElement()`</span>\n\t\t\t\t</h2><p><code>h(nodeName, attributes, [...children])</code></p>\n<p>Returns a Preact Virtual DOM element with the given <code>attributes</code>.</p>\n<p>All remaining arguments are collected into a <code>children</code> Array, and be any of the following:</p>\n<ul>\n<li>Scalar values (string, number, boolean, null, undefined, etc)</li>\n<li>More Virtual DOM elements</li>\n<li>Infinitely nested Arrays of the above</li>\n</ul>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// &lt;div id=\"foo\">Hello!&lt;/div></span>\n\n<span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Preact!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// &lt;div id=\"foo\">Hello Preact!&lt;/div></span>\n\n<span class=\"token function\">h</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// &lt;div id=\"foo\">&lt;span>Hello!&lt;/span>&lt;/div></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t"}