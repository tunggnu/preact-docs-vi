{"meta":{"title":"Linked State","toc":[{"text":"Linked State","id":"linked-state","level":1},{"text":"The Nicer Manual Way","id":"the-nicer-manual-way","level":2},{"text":"Linked State to the Rescue","id":"linked-state-to-the-rescue","level":2},{"text":"Custom Event Paths","id":"custom-event-paths","level":2},{"text":"Illustration: Grouped Radio Buttons","id":"illustration:-grouped-radio-buttons","level":3}]},"html":"<h1>Linked State</h1><p>One area Preact takes a little further than React is in optimizing state changes. A common pattern in ES2015 React code is to use Arrow functions within a <code>render()</code> method in order to update state in response to events.  Creating functions enclosed in a scope on every render is inefficient and forces the garbage collector to do more work than is necessary.</p>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"the-nicer-manual-way\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#the-nicer-manual-way\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: The Nicer Manual Way (#the-nicer-manual-way)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>The Nicer Manual Way</span>\n\t\t\t\t</h2><p>One solution is to declare bound component methods using ES7 class properties (<a href=\"https://github.com/jeffmo/es-class-fields-and-static-properties\" target=\"_blank\" rel=\"noopener noreferrer\">class instance fields</a>):</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function-variable function\">updateText</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span> onInput<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updateText<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>While this achieves much better runtime performance, it&#39;s still a lot of unnecessary code to wire up state to UI.</p>\n<blockquote>\n<p>Another solution is to bind component methods <em>declaratively</em>, using ES7 decorators, such as <a href=\"https://github.com/developit/decko\" target=\"_blank\" rel=\"noopener noreferrer\">decko's</a> <code>@bind</code>:</p>\n</blockquote>\n\n\t\t\t\t<h2 id=\"linked-state-to-the-rescue\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#linked-state-to-the-rescue\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Linked State to the Rescue (#linked-state-to-the-rescue)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Linked State to the Rescue</span>\n\t\t\t\t</h2><p>Fortunately, there is a solution in the form of preact&#39;s <a href=\"https://github.com/developit/linkstate\" target=\"_blank\" rel=\"noopener noreferrer\">`linkState`</a> module.</p>\n<blockquote>\n<p>Earlier versions of Preact had the <code>linkState()</code> function built-in; however, it has since been moved to a separate module. If you wish to restore the old behavior, see <a href=\"https://github.com/developit/linkstate#usage\" target=\"_blank\" rel=\"noopener noreferrer\">this page</a> for information about using the polyfill. </p>\n</blockquote>\n<p>Calling <code>linkState(this, &#39;text&#39;)</code> returns a handler function that, when passed an Event, uses its associated value to update the named property in your component&#39;s state.  Multiple calls to <code>linkState(component, name)</code> with the same <code>component</code> and <code>name</code> are cached, so there is essentially no performance penalty.</p>\n<p>Here is the previous example rewritten using <strong>Linked State</strong>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> linkState <span class=\"token keyword\">from</span> <span class=\"token string\">'linkstate'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span> onInput<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">linkState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>This is concise, easy to comprehend, and effective. It handles linking state from any input type. An optional third argument <code>&#39;path&#39;</code> can be used to explicitly provide a dot-notated keypath to the new state value for more custom bindings (such as binding to a third party component&#39;s value).</p>\n\n\t\t\t\t<h2 id=\"custom-event-paths\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#custom-event-paths\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Custom Event Paths (#custom-event-paths)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Custom Event Paths</span>\n\t\t\t\t</h2><p>By default, <code>linkState()</code> will try to derive the appropriate value from an event automatically. For example, an <code>&lt;input&gt;</code> element will set the given state property to <code>event.target.value</code> or <code>event.target.checked</code> depending on the input type. For custom event handlers, passing scalar values to the handler generated by <code>linkState()</code> will simply use the scalar value. Most of the time, this behavior is desirable.</p>\n<p>There are cases where this is undesirable, however - custom events and grouped radio buttons are two such examples.  In these cases, a third argument can be passed to <code>linkState()</code> to specify the dot-notated key path within the event where a value can be found.</p>\n<p>To understand this feature, it can be useful to peek under the hood of <code>linkState()</code>. The following illustrates a manually created event handler that persists a value from within an Event object into state. It is functionally equivalent to the <code>linkState()</code> version, though does not include the memoization optimization that makes <code>linkState()</code> valuable.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// this handler returned from linkState:</span>\nhandler <span class=\"token operator\">=</span> <span class=\"token function\">linkState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'thing'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo.bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...is functionally equivalent to:</span>\n<span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">thing</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>bar\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"illustration:-grouped-radio-buttons\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#illustration:-grouped-radio-buttons\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Illustration: Grouped Radio Buttons (#illustration:-grouped-radio-buttons)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Illustration: Grouped Radio Buttons</span>\n\t\t\t\t</h3><p>The following code does not work as expected. If the user clicks &quot;no&quot;, <code>noChecked</code> becomes <code>true</code> but <code>yesChecked</code> remains <code>true</code>, as <code>onChange</code> is not fired on the other radio button:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> linkState <span class=\"token keyword\">from</span> <span class=\"token string\">'linkstate'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> yes<span class=\"token punctuation\">,</span> no <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"demo\"</span>\n          value<span class=\"token operator\">=</span><span class=\"token string\">\"yes\"</span> checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>yes<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">linkState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"demo\"</span>\n          value<span class=\"token operator\">=</span><span class=\"token string\">\"no\"</span> checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>no<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">linkState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p><code>linkState</code>&#39;s third argument helps here. It lets you provide a path on the event object to use as the linked value. Revisiting the previous example, let&#39;s explicitly tell linkState to get its new state value from the <code>value</code> property on <code>event.target</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> linkState <span class=\"token keyword\">from</span> <span class=\"token string\">'linkstate'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> answer <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"demo\"</span>\n          value<span class=\"token operator\">=</span><span class=\"token string\">\"yes\"</span> checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>answer <span class=\"token operator\">==</span> <span class=\"token string\">'yes'</span><span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">linkState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'answer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'target.value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"radio\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"demo\"</span>\n          value<span class=\"token operator\">=</span><span class=\"token string\">\"no\"</span> checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>answer <span class=\"token operator\">==</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">linkState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'answer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'target.value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Now the example works as intended!</p>\n"}