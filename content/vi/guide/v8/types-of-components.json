{"meta":{"title":"Types of Components","toc":[{"text":"Types of Components","id":"types-of-components","level":1},{"text":"Example","id":"example","level":2},{"text":"Destructure Props & State","id":"destructure-props--state","level":3},{"text":"Stateless Functional Components","id":"stateless-functional-components","level":3}]},"html":"<h1>Types of Components</h1><p>There two types of components in Preact:</p>\n<ul>\n<li>Classical Components, with [lifecycle methods] and state</li>\n<li>Stateless Functional Components, which are functions that accept <code>props</code> and return [JSX].</li>\n</ul>\n<p>Within these two types, there are also a few different ways to implement components.</p>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"example\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#example\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Example (#example)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Example</span>\n\t\t\t\t</h2><p>Let&#39;s use an example: a simple <code>&lt;Link&gt;</code> component that creates an HTML <code>&lt;a&gt;</code> element:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Link</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span> props<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>We can instantiate/render this component as follows:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://example.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Some Text<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Link</span><span class=\"token punctuation\">></span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"destructure-props--state\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#destructure-props--state\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Destructure Props & State (#destructure-props--state)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Destructure Props & State</span>\n\t\t\t\t</h3><p>Since this is ES6 / ES2015, we can further simplify our <code>&lt;Link&gt;</code> component by mapping keys from <code>props</code> (the first argument to <code>render()</code>) to local variables using <a href=\"https://github.com/lukehoban/es6features#destructuring\" target=\"_blank\" rel=\"noopener noreferrer\">destructuring</a>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Link</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> href<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>a <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">{</span> href<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>If we wanted to copy <em>all</em> of the <code>props</code> passed to our <code>&lt;Link&gt;</code> component onto the <code>&lt;a&gt;</code> element, we can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"noopener noreferrer\">spread operator</a>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Link</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>a <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"stateless-functional-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#stateless-functional-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Stateless Functional Components (#stateless-functional-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Stateless Functional Components</span>\n\t\t\t\t</h3><p>Lastly, we can see that this component does not hold state - we can render the component with the same props and get the same result each time.  When this is the case, it&#39;s often best to use a Stateless Functional Component. These are just functions that accept <code>props</code> as an argument, and return JSX.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Link</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token operator\">&lt;</span>a <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p><em>ES2015 Note:</em> the above is an Arrow Function, and because we&#39;ve used parens instead of braces for the function body, the value within the parens is automatically returned. You can read more about this <a href=\"https://github.com/lukehoban/es6features#arrows\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p>\n</blockquote>\n"}