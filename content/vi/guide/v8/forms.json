{"meta":{"title":"Forms","toc":[{"text":"Forms","id":"forms","level":1},{"text":"Controlled & Uncontrolled Components","id":"controlled--uncontrolled-components","level":2},{"text":"Checkboxes & Radio Buttons","id":"checkboxes--radio-buttons","level":2},{"text":"Checkbox Example","id":"checkbox-example","level":3}]},"html":"<h1>Forms</h1><p>Forms in Preact work much the same as they do in React, except there is no support for the &quot;static&quot; (initial value) props/attributes.</p>\n<p><strong><a href=\"https://reactjs.org/docs/forms.html\" target=\"_blank\" rel=\"noopener noreferrer\">React Forms Docs</a></strong></p>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"controlled--uncontrolled-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#controlled--uncontrolled-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Controlled & Uncontrolled Components (#controlled--uncontrolled-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Controlled & Uncontrolled Components</span>\n\t\t\t\t</h2><p>React&#39;s documentation on <a href=\"https://reactjs.org/docs/forms.html#controlled-components\" target=\"_blank\" rel=\"noopener noreferrer\">\"Controlled\" Components</a> and <a href=\"https://reactjs.org/docs/uncontrolled-components.html\" target=\"_blank\" rel=\"noopener noreferrer\">\"Uncontrolled\" Components</a> is immensely useful in understanding how to take HTML forms, which have bidirectional data flow, and make use of them from the context of a Component-based Virtual DOM renderer, which generally has unidirectional data flow.</p>\n<p>Generally, you should try to use <em>Controlled</em> Components at all times.  However, when building standalone Components or wrapping third-party UI libraries, it can still be useful to simply use your component as a mount point for non-preact functionality.  In these cases, &quot;Uncontrolled&quot; Components are nicely suited to the task.</p>\n\n\t\t\t\t<h2 id=\"checkboxes--radio-buttons\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#checkboxes--radio-buttons\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Checkboxes & Radio Buttons (#checkboxes--radio-buttons)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Checkboxes & Radio Buttons</span>\n\t\t\t\t</h2><p>Checkboxes and radio buttons (<code>&lt;input type=&quot;checkbox|radio&quot;&gt;</code>) can initially cause confusion when building controlled forms. This is because in an uncontrolled environment, we would typically allow the browser to &quot;toggle&quot; or &quot;check&quot; a checkbox or radio button for us, listening for a change event and reacting to the new value.  However, this technique does not transition well into a world view where the UI is always updated automatically in response to state and prop changes.</p>\n<blockquote>\n<p><strong>Walk-Through:</strong> Say we listen for a &quot;change&quot; event on a checkbox, which is fired when the checkbox is checked or unchecked by the user.  In our change event handler, we set a value in <code>state</code> to the new value received from the checkbox.  Doing so will trigger a re-render of our component, which will re-assign the value of the checkbox to the value from state.  This is unnecessary, because we just asked the DOM for a value but then told it to render again with whatever value we wanted.</p>\n</blockquote>\n<p>So, instead of listening for a <code>change</code> event we should listen for a <code>click</code> event, which is fired any time the user clicks on the checkbox <em>or an associated <code>&lt;label&gt;</code></em>.  Checkboxes just toggle between Boolean <code>true</code> and <code>false</code>, so clicking the checkbox or the label, we&#39;ll just invert whatever value we have in state, triggering a re-render, setting the checkbox&#39;s displayed value to the one we want.</p>\n\n\t\t\t\t<h3 id=\"checkbox-example\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#checkbox-example\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Checkbox Example (#checkbox-example)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Checkbox Example</span>\n\t\t\t\t</h3>\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> checked <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> checked <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> checked <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input\n                    type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span>\n                    checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>checked<span class=\"token punctuation\">}</span>\n                    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t"}