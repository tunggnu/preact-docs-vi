{"meta":{"title":"Switching to Preact from React","toc":[{"text":"Switching to Preact (from React)","id":"switching-to-preact-from-react","level":1},{"text":"Easy: `preact-compat` Alias","id":"easy:-preact-compat-alias","level":2},{"text":"How to Alias preact-compat","id":"how-to-alias-preact-compat","level":3},{"text":"Aliasing via Webpack","id":"aliasing-via-webpack","level":4},{"text":"Aliasing via Parcel","id":"aliasing-via-parcel","level":4},{"text":"Aliasing via Browserify","id":"aliasing-via-browserify","level":4},{"text":"Aliasing Manually","id":"aliasing-manually","level":4},{"text":"Aliasing in Node using module-alias","id":"aliasing-in-node-using-module-alias","level":4},{"text":"Build & Test","id":"build--test","level":3},{"text":"Optimal: Switch to Preact","id":"optimal:-switch-to-preact","level":2},{"text":"1. Install Preact","id":"1-install-preact","level":3},{"text":"2. JSX Pragma: transpile to `h()`","id":"2-jsx-pragma:-transpile-to-h","level":3},{"text":"Via Babel","id":"via-babel","level":4},{"text":"Via Comments","id":"via-comments","level":4},{"text":"Via Bublé","id":"via-bublé","level":4},{"text":"3. Update any Legacy Code","id":"3-update-any-legacy-code","level":3},{"text":"4. Simplify Root Render","id":"4-simplify-root-render","level":3}]},"html":"<h1>Switching to Preact (from React)</h1><p>There are two different approaches to switch from React to Preact:</p>\n<ol>\n<li>Install the <code>preact-compat</code> alias</li>\n<li>Switch your imports to <code>preact</code> and remove incompatible code</li>\n</ol>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"easy:-preact-compat-alias\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#easy:-preact-compat-alias\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Easy: `preact-compat` Alias (#easy:-preact-compat-alias)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Easy: `preact-compat` Alias</span>\n\t\t\t\t</h2><p>Switching to Preact can be as easy as installing and aliasing <code>preact-compat</code> in for <code>react</code> and <code>react-dom</code>.\nThis lets you continue writing React/ReactDOM code without any changes to your workflow or codebase.\n<code>preact-compat</code> adds somewhere around 2kb to your bundle size, but has the advantage of supporting\nthe vast majority of existing React modules you might find on npm.  The <code>preact-compat</code> package provides\nall the necessary tweaks on top of Preact&#39;s core to make it work just like <code>react</code> and <code>react-dom</code>, in a single module.</p>\n<p>The process for installation is two steps.\nFirst, you must install preact and preact-compat (they are separate packages):</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-S</span> preact preact-compat</code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>With those dependencies installed, configure your build system to alias React imports so they point to Preact instead.</p>\n\n\t\t\t\t<h3 id=\"how-to-alias-preact-compat\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#how-to-alias-preact-compat\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: How to Alias preact-compat (#how-to-alias-preact-compat)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>How to Alias preact-compat</span>\n\t\t\t\t</h3><p>Now that you have your dependencies installed, you&#39;ll need to configure your build system\nto redirect any imports/requires looking for <code>react</code> or <code>react-dom</code> with <code>preact-compat</code>.</p>\n\n\t\t\t\t<h4 id=\"aliasing-via-webpack\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#aliasing-via-webpack\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Aliasing via Webpack (#aliasing-via-webpack)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Aliasing via Webpack</span>\n\t\t\t\t</h4><p>Simply add the following <a href=\"https://webpack.js.org/configuration/resolve/#resolvealias\" target=\"_blank\" rel=\"noopener noreferrer\">resolve.alias</a>\nconfiguration to your <code>webpack.config.js</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"resolve\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"alias\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preact-compat\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preact-compat\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h4 id=\"aliasing-via-parcel\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#aliasing-via-parcel\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Aliasing via Parcel (#aliasing-via-parcel)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Aliasing via Parcel</span>\n\t\t\t\t</h4><p>Parcel supports defining module aliases right in your <code>package.json</code> under an <code>&quot;aliases&quot;</code> key:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"alias\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preact-compat\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preact-compat\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h4 id=\"aliasing-via-browserify\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#aliasing-via-browserify\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Aliasing via Browserify (#aliasing-via-browserify)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Aliasing via Browserify</span>\n\t\t\t\t</h4><p>If you&#39;re using Browserify, aliases can be defined by adding the <a href=\"https://www.npmjs.com/package/aliasify\" target=\"_blank\" rel=\"noopener noreferrer\">aliasify</a> transform.</p>\n<p>First, install the transform:  <code>npm i -D aliasify</code></p>\n<p>Then, in your <code>package.json</code>, tell aliasify to redirect react imports to preact-compat:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"aliasify\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"aliases\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preact-compat\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preact-compat\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>A common use-case for preact-compat is to support React-compatible third-party modules. When using Browserify, remember to configure the <a href=\"https://www.npmjs.com/package/aliasify\" target=\"_blank\" rel=\"noopener noreferrer\">Aliasify</a> transform to be <strong>global</strong> via the <code>--global-transform</code> <a href=\"https://github.com/browserify/browserify\" target=\"_blank\" rel=\"noopener noreferrer\">Browserify option</a>.</p>\n\n\t\t\t\t<h4 id=\"aliasing-manually\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#aliasing-manually\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Aliasing Manually (#aliasing-manually)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Aliasing Manually</span>\n\t\t\t\t</h4><p>If you&#39;re not using a build system or want to permanently switch to <code>preact-compat</code>,\nyou can also find &amp; replace all the imports/requires in your codebase much like an alias does:</p>\n<blockquote>\n<p><strong>find:</strong>    <code>([&#39;&quot;])react(-dom)?\\1</code></p>\n<p><strong>replace:</strong> <code>$1preact-compat$1</code></p>\n</blockquote>\n<p>In this case though, you might find it more compelling to switch directly to <code>preact</code> itself, rather than relying on <code>preact-compat</code>.\nPreact&#39;s core is quite fully featured, and many idiomatic React codebases can actually be switched straight to <code>preact</code> with little effort.\nThat approach is covered in the next section.</p>\n\n\t\t\t\t<h4 id=\"aliasing-in-node-using-module-alias\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#aliasing-in-node-using-module-alias\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Aliasing in Node using module-alias (#aliasing-in-node-using-module-alias)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Aliasing in Node using module-alias</span>\n\t\t\t\t</h4><p>For SSR purposes, if you are not using a bundler like webpack to build your server side code, you can use the <a href=\"https://www.npmjs.com/package/module-alias\" target=\"_blank\" rel=\"noopener noreferrer\">module-alias</a> package to replace react with preact.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-S</span> module-alias</code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p><code>patchPreact.js</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> moduleAlias <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-alias'</span><span class=\"token punctuation\">)</span>\n\nmoduleAlias<span class=\"token punctuation\">.</span><span class=\"token function\">addAliases</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'react'</span><span class=\"token operator\">:</span> <span class=\"token string\">'preact-compat/dist/preact-compat.min'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'react-dom'</span><span class=\"token operator\">:</span> <span class=\"token string\">'preact-compat/dist/preact-compat.min'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'create-react-class'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./create-preact-class'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p><code>create-preact-class.js</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createClass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact-compat/dist/preact-compat.min'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> createClass</code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>If you are using the new <code>import</code> syntax on your server with Babel, writing these lines above your other imports will not work since Babel moves all imports to the top of a module.  In that case, save the above code as <code>patchPreact.js</code>, then import it at the top of your file (<code>import &#39;./patchPreact&#39;</code>). You can read more on <code>module-alias</code> usage <a href=\"https://www.npmjs.com/package/module-alias\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p>\n<p>It is also possible to alias directly in node without the <code>module-alias</code> package. This relies on internal properties of Node&#39;s module system, so proceed with caution.  To alias manually:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// patchPreact.js</span>\n<span class=\"token keyword\">var</span> React <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ReactDOM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ReactDOMServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> CreateReactClass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> Preact <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'preact-compat/dist/preact-compat.min'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> Module <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>constructor\nModule<span class=\"token punctuation\">.</span>_cache<span class=\"token punctuation\">[</span>require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Preact\nModule<span class=\"token punctuation\">.</span>_cache<span class=\"token punctuation\">[</span>require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Preact\nModule<span class=\"token punctuation\">.</span>_cache<span class=\"token punctuation\">[</span>require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> Preact<span class=\"token punctuation\">.</span>createClass</code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"build--test\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#build--test\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Build & Test (#build--test)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Build & Test</span>\n\t\t\t\t</h3><p><strong>You&#39;re done!</strong>\nNow when you run your build, all your React imports will be instead importing <code>preact-compat</code> and your bundle will be much smaller.\nIt&#39;s always a good idea to run your test suite and of course load up your app to see how it&#39;s working.</p>\n<hr>\n\n\t\t\t\t<h2 id=\"optimal:-switch-to-preact\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#optimal:-switch-to-preact\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Optimal: Switch to Preact (#optimal:-switch-to-preact)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Optimal: Switch to Preact</span>\n\t\t\t\t</h2><p>You don&#39;t have to use <code>preact-compat</code> in your own codebase in order to migrate from React to Preact.\nPreact&#39;s API is nearly identical to React&#39;s, and many React codebases can be migrated with little or no changes needed.</p>\n<p>Generally, the process of switching to Preact involves a few steps:</p>\n\n\t\t\t\t<h3 id=\"1-install-preact\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#1-install-preact\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 1. Install Preact (#1-install-preact)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>1. Install Preact</span>\n\t\t\t\t</h3><p>This one is simple: you&#39;ll need to install the library in order to use it!</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> preact  <span class=\"token comment\"># or: npm i -S preact</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"2-jsx-pragma:-transpile-to-h\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#2-jsx-pragma:-transpile-to-h\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 2. JSX Pragma: transpile to `h()` (#2-jsx-pragma:-transpile-to-h)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>2. JSX Pragma: transpile to `h()`</span>\n\t\t\t\t</h3><blockquote>\n<p><strong>Background:</strong> While the <a href=\"https://facebook.github.io/jsx/\" target=\"_blank\" rel=\"noopener noreferrer\">JSX</a> language extension is independent from React, popular\ntranspilers like <a href=\"https://babeljs.io\" target=\"_blank\" rel=\"noopener noreferrer\">Babel</a> and <a href=\"https://buble.surge.sh\" target=\"_blank\" rel=\"noopener noreferrer\">Bublé</a> default to converting JSX to <code>React.createElement()</code> calls.\nThere are historical reasons for this, but it&#39;s worth understanding that the function calls JSX\ntranspiles to are actually a pre-existing technology called <a href=\"https://github.com/dominictarr/hyperscript\" target=\"_blank\" rel=\"noopener noreferrer\">Hyperscript</a>. Preact pays homage\nto this and attempts to promote a better understanding of the simplicity of JSX by using <code>h()</code>\nas its <a href=\"http://www.jasonformat.com/wtf-is-jsx/\" target=\"_blank\" rel=\"noopener noreferrer\">JSX Pragma</a>.</p>\n<p><strong>TL;DR:</strong> We need to switch <code>React.createElement()</code> out for preact&#39;s <code>h()</code></p>\n</blockquote>\n<p>In JSX, the &quot;pragma&quot; is the name of a function that handles creating each element:</p>\n<blockquote>\n<p><code>&lt;div /&gt;</code> transpiles to <code>h(&#39;div&#39;)</code></p>\n<p><code>&lt;Foo /&gt;</code> transpiles to <code>h(Foo)</code></p>\n<p><code>&lt;a href=&quot;/&quot;&gt;Hello&lt;/a&gt;</code> to <code>h(&#39;a&#39;, { href:&#39;/&#39; }, &#39;Hello&#39;)</code></p>\n</blockquote>\n<p>In each example above, <code>h</code> is the function name we declared as the JSX Pragma.</p>\n\n\t\t\t\t<h4 id=\"via-babel\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#via-babel\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Via Babel (#via-babel)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Via Babel</span>\n\t\t\t\t</h4><p>If you&#39;re using Babel, you can set the JSX Pragma in your <code>.babelrc</code> or <code>package.json</code> (whichever you prefer):</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"transform-react-jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"pragma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"h\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h4 id=\"via-comments\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#via-comments\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Via Comments (#via-comments)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Via Comments</span>\n\t\t\t\t</h4><p>If you&#39;re working in an online editor powered by Babel (such as JSFiddle or Codepen),\nyou can set the JSX Pragma by defining a comment near the top of your code:</p>\n<p><code>/** @jsx h */</code></p>\n\n\t\t\t\t<h4 id=\"via-bublé\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#via-bublé\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Via Bublé (#via-bublé)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Via Bublé</span>\n\t\t\t\t</h4><p><a href=\"https://buble.surge.sh\" target=\"_blank\" rel=\"noopener noreferrer\">Bublé</a> ships with JSX support by default.  Just set the <code>jsx</code> option:</p>\n<p><code>buble({ jsx: &#39;h&#39; })</code></p>\n\n\t\t\t\t<h3 id=\"3-update-any-legacy-code\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#3-update-any-legacy-code\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 3. Update any Legacy Code (#3-update-any-legacy-code)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>3. Update any Legacy Code</span>\n\t\t\t\t</h3><p>While Preact strives to be API-compatible with React, portions of the interface are intentionally not included.\nThe most noteworthy of these is <code>createClass()</code>. Opinions vary wildly on the subject of classes and OOP, but\nit&#39;s worth understanding that JavaScript classes are internally in VDOM libraries to represent component types,\nwhich is important when dealing with the nuances of managing component lifecycles.</p>\n<p>If your codebase is heavily reliant on <code>createClass()</code>, you still have a great option:\nLaurence Dorman maintains a <a href=\"https://github.com/ld0rman/preact-classless-component\" target=\"_blank\" rel=\"noopener noreferrer\">standalone `createClass()` implementation</a>\nthat works directly with preact and is only a few hundred bytes.\nAlternatively, you can automatically convert your <code>createClass()</code> calls to ES Classes using <a href=\"https://github.com/vutran/preact-codemod\" target=\"_blank\" rel=\"noopener noreferrer\">preact-codemod</a> by Vu Tran.</p>\n<p>Another difference worth noting is that Preact only supports Function Refs by default.\nString refs are deprecated in React and will be removed shortly, since they introduce a surprising amount of complexity for little gain.\nIf you want to keep using String refs, <a href=\"https://gist.github.com/developit/63e7a81a507c368f7fc0898076f64d8d\" target=\"_blank\" rel=\"noopener noreferrer\">this tiny linkedRef function</a>\noffers a future-proofed version that still populates <code>this.refs.$$</code> like String Refs did.  The simplicity of this tiny wrapper around\nFunction Refs also helps illustrate why Function Refs are now the preferred choice going forward.</p>\n\n\t\t\t\t<h3 id=\"4-simplify-root-render\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#4-simplify-root-render\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 4. Simplify Root Render (#4-simplify-root-render)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>4. Simplify Root Render</span>\n\t\t\t\t</h3><p>Since React 0.13, <code>render()</code> has been provided by the <code>react-dom</code> module.\nPreact does not use a separate module for DOM rendering, since it is focused solely on being a great DOM renderer.\nSo, the last step in converting your codebase to Preact is switching <code>ReactDOM.render()</code> to preact&#39;s <code>render()</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> ReactDOM.render(&lt;App />, document.getElementById('app'));\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> render(&lt;App />, document.body);</span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>It&#39;s also worth noting that Preact&#39;s <code>render()</code> is non-destructive, so rendering into <code>&lt;body&gt;</code> is perfectly fine (encouraged, even).\nThis is possible because Preact does not assume it controls the entire root element you pass it.  The second argument to <code>render()</code>\nis actually <code>parent</code> - meaning it&#39;s a DOM element to render <em>into</em>.  If you would like to re-render from the root (perhaps for Hot\nModule Replacement), <code>render()</code> accepts an element to replace as a third argument:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// initial render:</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// update in-place:</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>lastElementChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>In the above example, we&#39;re relying on the last child being our previously rendered root.\nWhile this works in many cases (jsfiddles, codepens, etc), it&#39;s best to have more control.\nThis is why <code>render()</code> returns the root element: you pass it as the third argument to re-render in-place.\nThe following example shows how to re-render in response to Webpack&#39;s Hot Module Replacement updates:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token comment\">// root holds our app's root DOM Element:</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  root <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// example: Re-render on Webpack HMR update:</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./app'</span><span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>The full technique can be seen in <a href=\"https://github.com/developit/preact-boilerplate/blob/master/src/index.js#L6-L18\" target=\"_blank\" rel=\"noopener noreferrer\">preact-boilerplate</a>.</p>\n"}