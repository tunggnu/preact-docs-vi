{"meta":{"title":"Differences to React","toc":[{"text":"Differences to React","id":"differences-to-react","level":1},{"text":"Version Compatibility","id":"version-compatibility","level":2},{"text":"What's Included?","id":"whats-included?","level":2},{"text":"What's Added?","id":"whats-added?","level":2},{"text":"What's Missing?","id":"whats-missing?","level":2},{"text":"What's Different?","id":"whats-different?","level":2}]},"html":"<h1>Differences to React</h1><p>Preact itself is not intended to be a reimplementation of React.  There are differences.  Many of these differences are trivial, or can be completely removed by using <a href=\"https://github.com/preactjs/preact-compat\" target=\"_blank\" rel=\"noopener noreferrer\">preact-compat</a>, which is a thin layer over Preact that attempts to achieve 100% compatibility with React.</p>\n<p>The reason Preact does not attempt to include every single feature of React is in order to remain <strong>small</strong> and <strong>focused</strong> - otherwise it would make more sense to simply submit optimizations to the React project, which is already a very complex and well-architected codebase.</p>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"version-compatibility\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#version-compatibility\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Version Compatibility (#version-compatibility)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Version Compatibility</span>\n\t\t\t\t</h2><p>For both Preact and <a href=\"https://github.com/preactjs/preact-compat\" target=\"_blank\" rel=\"noopener noreferrer\">preact-compat</a>, version compatibility is measured against the <em>current</em> and <em>previous</em> major releases of React. When new features are announced by the React team, they may be added to Preact&#39;s core if it makes sense given the <a href=\"/about/project-goals\">Project Goals</a>.  This is a fairly democratic process, constantly evolving through discussion and decisions made in the open, using issues and pull requests.</p>\n<blockquote>\n<p>Thus, the website and documentation reflect React <code>0.14.x</code> and <code>15.x</code> when discussing compatibility or making comparisons.</p>\n</blockquote>\n\n\t\t\t\t<h2 id=\"whats-included?\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#whats-included?\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: What's Included? (#whats-included?)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>What's Included?</span>\n\t\t\t\t</h2><ul>\n<li><a href=\"https://facebook.github.io/react/docs/reusable-components.html#es6-classes\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 Class Components</a><ul>\n<li><em>classes provide an expressive way to define stateful components</em></li>\n</ul>\n</li>\n<li><a href=\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\" target=\"_blank\" rel=\"noopener noreferrer\">Higher-Order Components</a>  <ul>\n<li><em>components that return other components from <code>render()</code>, effectively wrappers</em></li>\n</ul>\n</li>\n<li><a href=\"https://facebook.github.io/react/docs/reusable-components.html#stateless-functions\" target=\"_blank\" rel=\"noopener noreferrer\">Stateless Pure Functional Components</a>  <ul>\n<li><em>functions that receive <code>props</code> as arguments and return JSX/VDOM</em></li>\n</ul>\n</li>\n<li><a href=\"https://reactjs.org/docs/legacy-context.html\" target=\"_blank\" rel=\"noopener noreferrer\">Contexts</a>: Support for the legacy <code>context API</code> was added in Preact <a href=\"https://github.com/preactjs/preact/milestones/3.0\" target=\"_blank\" rel=\"noopener noreferrer\">3.0</a>.<ul>\n<li><em>Support for the <a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener noreferrer\">new api</a> is discussed <a href=\"https://github.com/preactjs/preact/pull/963\" target=\"_blank\" rel=\"noopener noreferrer\">as PR #963</a>.</em></li>\n</ul>\n</li>\n<li><a href=\"https://facebook.github.io/react/docs/more-about-refs.html\" target=\"_blank\" rel=\"noopener noreferrer\">Refs</a>: Support for function refs was added in Preact in <a href=\"https://github.com/preactjs/preact/milestones/4.0\" target=\"_blank\" rel=\"noopener noreferrer\">4.0</a>. String refs are supported in <code>preact-compat</code>.<ul>\n<li><em>Refs provide a way to refer to rendered elements and child components.</em></li>\n</ul>\n</li>\n<li>Virtual DOM Diffing<ul>\n<li><em>This is a given - Preact&#39;s diff is simple but effective, and <strong><a href=\"http://developit.github.io/js-repaint-perfs/\" target=\"_blank\" rel=\"noopener noreferrer\">extremely</a> <a href=\"https://localvoid.github.io/uibench/\" target=\"_blank\" rel=\"noopener noreferrer\">fast</a></strong>.</em></li>\n</ul>\n</li>\n<li><code>h()</code>, a more generalized version of <code>React.createElement</code><ul>\n<li><em>This idea was originally called <a href=\"https://github.com/dominictarr/hyperscript\" target=\"_blank\" rel=\"noopener noreferrer\">hyperscript</a> and has value well beyond the React ecosystem, so Preact promotes the original standard. (<a href=\"http://jasonformat.com/wtf-is-jsx\" target=\"_blank\" rel=\"noopener noreferrer\">Read: why `h()`?</a>)</em></li>\n<li><em>It&#39;s also a little more readable: <code>h(&#39;a&#39;, { href:&#39;/&#39; }, h(&#39;span&#39;, null, &#39;Home&#39;))</code></em></li>\n</ul>\n</li>\n</ul>\n\n\t\t\t\t<h2 id=\"whats-added?\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#whats-added?\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: What's Added? (#whats-added?)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>What's Added?</span>\n\t\t\t\t</h2><p>Preact actually adds a few convenient features inspired by work in the React community:</p>\n<ul>\n<li><code>this.props</code> and <code>this.state</code> are passed to <code>render()</code> for you  <ul>\n<li><em>You can still reference them manually. This is just cleaner, particularly when <a href=\"http://www.2ality.com/2015/01/es6-destructuring.html\" target=\"_blank\" rel=\"noopener noreferrer\">destructuring</a></em></li>\n</ul>\n</li>\n<li>Batching of DOM updates, debounced/collated using <code>setTimeout(1)</code> <em>(can also use requestAnimationFrame)</em></li>\n<li>You can just use <code>class</code> for CSS classes. <code>className</code> is still supported, but <code>class</code> is preferred.</li>\n<li>Component and element recycling/pooling.</li>\n</ul>\n\n\t\t\t\t<h2 id=\"whats-missing?\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#whats-missing?\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: What's Missing? (#whats-missing?)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>What's Missing?</span>\n\t\t\t\t</h2><ul>\n<li><a href=\"https://github.com/developit/proptypes\" target=\"_blank\" rel=\"noopener noreferrer\">PropType</a> Validation: Not everyone uses PropTypes, so they aren&#39;t part of Preact&#39;s core.<ul>\n<li><em><strong>PropTypes are fully supported</strong> in <a href=\"https://github.com/preactjs/preact-compat\" target=\"_blank\" rel=\"noopener noreferrer\">preact-compat</a>, or you can use them manually.</em></li>\n</ul>\n</li>\n<li><a href=\"https://facebook.github.io/react/docs/top-level-api.html#reactchildren\" target=\"_blank\" rel=\"noopener noreferrer\">Children</a>: Not necessary in Preact, because <code>props.children</code> is <em>always an Array</em>.<ul>\n<li><em><code>React.Children</code> is fully supported in <a href=\"https://github.com/preactjs/preact-compat\" target=\"_blank\" rel=\"noopener noreferrer\">preact-compat</a>.</em></li>\n</ul>\n</li>\n<li>Synthetic Events: Preact&#39;s browser support target does not require this extra overhead.<ul>\n<li><em>Preact uses the browser&#39;s native <code>addEventListener</code> for event handling. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers\" target=\"_blank\" rel=\"noopener noreferrer\">GlobalEventHandlers</a> for a full list of DOM event handlers.</em></li>\n<li><em>A full events implementation would mean more maintenance and performance concerns, and a larger API.</em></li>\n</ul>\n</li>\n</ul>\n\n\t\t\t\t<h2 id=\"whats-different?\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#whats-different?\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: What's Different? (#whats-different?)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>What's Different?</span>\n\t\t\t\t</h2><p>Preact and React have some more subtle differences:</p>\n<ul>\n<li><code>render()</code> accepts a third argument, which is the root node to <em>replace</em>, otherwise it appends. This may change slightly in a future version, perhaps auto-detecting that a replacement render is appropriate by inspecting the root node.</li>\n<li>Components do not implement <code>contextTypes</code> or <code>childContextTypes</code>. Children receive all <code>context</code> entries drawn from <code>getChildContext()</code>.</li>\n</ul>\n"}