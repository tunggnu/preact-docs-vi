{"meta":{"title":"External DOM Mutations","toc":[{"text":"External DOM Mutations","id":"external-dom-mutations","level":1},{"text":"Overview","id":"overview","level":2},{"text":"Technique","id":"technique","level":2},{"text":"Example Walk-Through","id":"example-walk-through","level":2},{"text":"Real-World Examples","id":"real-world-examples","level":2}]},"html":"<h1>External DOM Mutations</h1>\n\t\t\t\t<h2 id=\"overview\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#overview\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Overview (#overview)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Overview</span>\n\t\t\t\t</h2><p>Sometimes there is a need to work with third-party libraries that expect to be able to freely mutate the DOM, persist state within it, or that have no component boundaries at all.  There are many great UI toolkits or re-usable elements that operate this way.  In Preact (and similarly in React), working with these types of libraries requires that you tell the Virtual DOM rendering/diffing algorithm that it shouldn&#39;t try to <em>undo</em> any external DOM mutations performed within a given Component (or the DOM element it represents).</p>\n\n\t\t\t\t<h2 id=\"technique\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#technique\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Technique (#technique)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Technique</span>\n\t\t\t\t</h2><p>This can be as simple as defining a <code>shouldComponentUpdate()</code> method on your component, and having it return <code>false</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Block</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>... or for shorthand:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Block</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">shouldComponentUpdate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>With this lifecycle hook in place and telling Preact not to re-render the Component when changes occur up the VDOM tree, your Component now has a reference to its root DOM element that can be treated as static until the Component is unmounted. As with any component that reference is simply called <code>this.base</code>, and corresponds to the root JSX Element that was returned from <code>render()</code>.</p>\n<hr>\n\n\t\t\t\t<h2 id=\"example-walk-through\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#example-walk-through\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Example Walk-Through (#example-walk-through)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Example Walk-Through</span>\n\t\t\t\t</h2><p>Here is an example of &quot;turning off&quot; re-rendering for a Component.  Note that <code>render()</code> is still invoked as part of creating and mounting the Component, in order to generate its initial DOM structure.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do not re-render via diff:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// you can do something with incoming props here if you need</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// now mounted, can freely modify the DOM:</span>\n    <span class=\"token keyword\">let</span> thing <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'maybe-a-custom-element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// component is about to be removed from the DOM, perform any cleanup.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"example\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"real-world-examples\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#real-world-examples\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Real-World Examples (#real-world-examples)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Real-World Examples</span>\n\t\t\t\t</h2><p>Alternatively, see this technique in action in <a href=\"https://github.com/developit/preact-token-input/blob/master/src/index.js\" target=\"_blank\" rel=\"noopener noreferrer\">preact-token-input</a> - it uses a component as a foothold in the DOM, but then disables updates and lets <a href=\"https://github.com/developit/tags-input\" target=\"_blank\" rel=\"noopener noreferrer\">tags-input</a> take over from there.  A more complex example would be <a href=\"https://github.com/developit/preact-richtextarea\" target=\"_blank\" rel=\"noopener noreferrer\">preact-richtextarea</a>, which uses this technique to avoid re-rendering an editable <code>&lt;iframe&gt;</code>.</p>\n"}