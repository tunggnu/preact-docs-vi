{"meta":{"title":"Getting Started","toc":[{"text":"Getting Started","id":"getting-started","level":1},{"text":"Import what you need","id":"import-what-you-need","level":2},{"text":"Global pragma","id":"global-pragma","level":3},{"text":"Rendering JSX","id":"rendering-jsx","level":2},{"text":"Components","id":"components","level":2},{"text":"The Component Lifecycle","id":"the-component-lifecycle","level":2}]},"html":"<h1>Getting Started</h1><p>This guide walks through building a simple &quot;ticking clock&quot; component. More detailed information for each topic can be found in the dedicated pages under the Guide menu.</p>\n<blockquote>\n<p>üíÅ You <a href=\"https://github.com/developit/preact-without-babel\" target=\"_blank\" rel=\"noopener noreferrer\">don't _have_ to use ES2015 to use Preact</a>... but you should. This guide assumes you have some sort of ES2015 build set up using babel and/or webpack/browserify/gulp/grunt/etc.  If you don&#39;t, start with <a href=\"https://github.com/preactjs/preact-cli\" target=\"_blank\" rel=\"noopener noreferrer\">preact-cli</a> or a <a href=\"http://codepen.io/developit/pen/pgaROe?editors=0010\" target=\"_blank\" rel=\"noopener noreferrer\">CodePen Template</a>.</p>\n</blockquote>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"import-what-you-need\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#import-what-you-need\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Import what you need (#import-what-you-need)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Import what you need</span>\n\t\t\t\t</h2><p>The <code>preact</code> module provides both named and default exports, so you can either import everything under a namespace of your choosing, or just what you need as locals:</p>\n<p><strong>Named:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Tell Babel to transform JSX into h() calls:</span>\n<span class=\"token comment\">/** @jsx h */</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p><strong>Default:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> preact <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Tell Babel to transform JSX into preact.h() calls:</span>\n<span class=\"token comment\">/** @jsx preact.h */</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p>Named imports work well for highly structured applications, whereas the default import is quick and never needs to be updated when using different parts of the library.</p>\n</blockquote>\n<p><strong>Using via a CDN:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/preact/dist/preact.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- To load Preact as a JS Module: --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/preact/dist/preact.mjs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"global-pragma\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#global-pragma\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Global pragma (#global-pragma)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Global pragma</span>\n\t\t\t\t</h3><p>Instead of declaring the <code>@jsx</code> pragma in your code, it&#39;s best to configure it globally in a <code>.babelrc</code>.</p>\n<p><strong>Named:</strong></p>\n<blockquote>\n<p><strong>For Babel 5 and prior:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token property\">\"jsxPragma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"h\"</span> <span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p><strong>For Babel 6:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"transform-react-jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"pragma\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"h\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p><strong>For Babel 7:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-transform-react-jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"pragma\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"h\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</blockquote>\n<p><strong>Default:</strong></p>\n<blockquote>\n<p><strong>For Babel 5 and prior:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token property\">\"jsxPragma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preact.h\"</span> <span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p><strong>For Babel 6:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"transform-react-jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"pragma\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"preact.h\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p><strong>For Babel 7:</strong></p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-transform-react-jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"pragma\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"preact.h\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</blockquote>\n<hr>\n\n\t\t\t\t<h2 id=\"rendering-jsx\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#rendering-jsx\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Rendering JSX (#rendering-jsx)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Rendering JSX</span>\n\t\t\t\t</h2><p>Out of the box, Preact provides an <code>h()</code> function that turns your JSX into Virtual DOM elements <em>(<a href=\"http://jasonformat.com/wtf-is-jsx\" target=\"_blank\" rel=\"noopener noreferrer\">here's how</a>)</em>. It also provides a <code>render()</code> function that creates a DOM tree from that Virtual DOM.</p>\n<p>To render some JSX, just import those two functions and use them like so:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span><span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> world<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi!\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Click Me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>This should seem pretty straightforward if you&#39;ve used <a href=\"https://github.com/dominictarr/hyperscript\" target=\"_blank\" rel=\"noopener noreferrer\">hyperscript</a> or one of its <a href=\"https://github.com/developit/vhtml\" target=\"_blank\" rel=\"noopener noreferrer\">many friends</a>.</p>\n<p>Rendering hyperscript with a virtual DOM is pointless, though. We want to render components and have them updated when data changes - that&#39;s where the power of virtual DOM diffing shines. üåü</p>\n<hr>\n\n\t\t\t\t<h2 id=\"components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Components (#components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Components</span>\n\t\t\t\t</h2><p>Preact exports a generic <code>Component</code> class, which can be extended to build encapsulated, self-updating pieces of a User Interface.  Components support all of the standard React <a href=\"#the-component-lifecycle\">lifecycle methods</a>, like <code>shouldComponentUpdate()</code> and <code>componentWillReceiveProps()</code>.  Providing specific implementations of these methods is the preferred mechanism for controlling <em>when</em> and <em>how</em> components update.</p>\n<p>Components also have a <code>render()</code> method, but unlike React this method is passed <code>(props, state)</code> as arguments. This provides an ergonomic means to destructure <code>props</code> and <code>state</code> into local variables to be referenced from JSX.</p>\n<p>Let&#39;s take a look at a very simple <code>Clock</code> component, which shows the current time.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span> time <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// render an instance of Clock into &lt;body>:</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Clock <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>That&#39;s great. Running this produces the following HTML DOM structure:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>10:28:57 PM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<hr>\n\n\t\t\t\t<h2 id=\"the-component-lifecycle\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#the-component-lifecycle\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: The Component Lifecycle (#the-component-lifecycle)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>The Component Lifecycle</span>\n\t\t\t\t</h2><p>In order to have the clock&#39;s time update every second, we need to know when <code>&lt;Clock&gt;</code> gets mounted to the DOM. <em>If you&#39;ve used HTML5 Custom Elements, this is similar to the <code>attachedCallback</code> and <code>detachedCallback</code> lifecycle methods.</em> Preact invokes the following lifecycle methods if they are defined for a Component:</p>\n<table>\n<thead>\n<tr>\n<th>Lifecycle method</th>\n<th>When it gets called</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>componentWillMount</code></td>\n<td>before the component gets mounted to the DOM</td>\n</tr>\n<tr>\n<td><code>componentDidMount</code></td>\n<td>after the component gets mounted to the DOM</td>\n</tr>\n<tr>\n<td><code>componentWillUnmount</code></td>\n<td>prior to removal from the DOM</td>\n</tr>\n<tr>\n<td><code>componentWillReceiveProps</code></td>\n<td>before new props get accepted</td>\n</tr>\n<tr>\n<td><code>shouldComponentUpdate</code></td>\n<td>before <code>render()</code>. Return <code>false</code> to skip render</td>\n</tr>\n<tr>\n<td><code>componentWillUpdate</code></td>\n<td>before <code>render()</code></td>\n</tr>\n<tr>\n<td><code>componentDidUpdate</code></td>\n<td>after <code>render()</code></td>\n</tr>\n</tbody></table>\n<p>So, we want to have a 1-second timer start once the Component gets added to the DOM, and stop if it is removed. We&#39;ll create the timer and store a reference to it in <code>componentDidMount</code>, and stop the timer in <code>componentWillUnmount</code>. On each timer tick, we&#39;ll update the component&#39;s <code>state</code> object with a new time value. Doing this will automatically re-render the component.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// set initial time:</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// update time every second</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// stop when not renderable</span>\n\t\t<span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span> time <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// render an instance of Clock into &lt;body>:</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Clock <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<hr>\n<p>Now we have <a href=\"http://jsfiddle.net/developit/u9m5x0L7/embedded/result,js/\" target=\"_blank\" rel=\"noopener noreferrer\">a ticking clock</a>!</p>\n"}