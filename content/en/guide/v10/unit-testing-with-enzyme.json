{"meta":{"title":"Unit Testing with Enzyme","description":"Testing Preact applications made easy with enzyme","toc":[{"text":"Unit Testing with Enzyme","id":"unit-testing-with-enzyme","level":1},{"text":"Installation","id":"installation","level":2},{"text":"Configuration","id":"configuration","level":2},{"text":"Example","id":"example","level":2},{"text":"How Enzyme works","id":"how-enzyme-works","level":2},{"text":"Full, shallow and string rendering","id":"full-shallow-and-string-rendering","level":2},{"text":"Triggering state updates and effects with `act`","id":"triggering-state-updates-and-effects-with-act","level":2},{"text":"Differences from Enzyme with React","id":"differences-from-enzyme-with-react","level":2}]},"html":"<h1>Unit Testing with Enzyme</h1><p>Airbnb&#39;s <a href=\"https://airbnb.io/enzyme/\" target=\"_blank\" rel=\"noopener noreferrer\">Enzyme</a> is a library for writing\ntests for React components. It supports different versions of React and\nReact-like libraries using &quot;adapters&quot;. There is an adapter for Preact,\nmaintained by the Preact team.</p>\n<p>Enzyme supports tests that run in a normal or headless browser using a tool\nsuch as <a href=\"http://karma-runner.github.io/latest/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Karma</a> or tests that\nrun in Node using <a href=\"https://github.com/jsdom/jsdom\" target=\"_blank\" rel=\"noopener noreferrer\">jsdom</a> as a fake\nimplementation of browser APIs.</p>\n<p>For a detailed introduction to using Enzyme and an API reference, see the\n<a href=\"https://airbnb.io/enzyme/\" target=\"_blank\" rel=\"noopener noreferrer\">Enzyme documentation</a>. The remainder of this guide\nexplains how to set Enzyme up with Preact, as well as ways in which Enzyme with\nPreact differs from Enzyme with React.</p>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"installation\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#installation\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Installation (#installation)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Installation</span>\n\t\t\t\t</h2><p>Install Enzyme and the Preact adapter using:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev enzyme enzyme-adapter-preact-pure</code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"configuration\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#configuration\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Configuration (#configuration)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Configuration</span>\n\t\t\t\t</h2><p>In your test setup code, you&#39;ll need to configure Enzyme to use the Preact\nadapter:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Adapter <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme-adapter-preact-pure'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">adapter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>For guidance on using Enzyme with different test runners, see the\n<a href=\"https://airbnb.io/enzyme/docs/guides.html\" target=\"_blank\" rel=\"noopener noreferrer\">Guides</a> section of the Enzyme\ndocumentation.</p>\n\n\t\t\t\t<h2 id=\"example\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#example\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Example (#example)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Example</span>\n\t\t\t\t</h2><p>Suppose we have a simple <code>Counter</code> component which displays an initial value,\nwith a button to update it:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact/hooks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> initialCount <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Current value: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Increment</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Using a test runner such as mocha or Jest, you can write a test to check that\nit works as expected:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'chai'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'../src/Counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should display initial count'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token attr-name\">initialCount</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current value: 5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should increment after \"Increment\" button is clicked'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token attr-name\">initialCount</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current value: 6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>For a runnable version of this project and other examples, see the\n<a href=\"https://github.com/preactjs/enzyme-adapter-preact-pure/blob/master/README.md#example-projects\" target=\"_blank\" rel=\"noopener noreferrer\">examples/</a>\ndirectory in the Preact adapter&#39;s repository.</p>\n\n\t\t\t\t<h2 id=\"how-enzyme-works\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#how-enzyme-works\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: How Enzyme works (#how-enzyme-works)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>How Enzyme works</span>\n\t\t\t\t</h2><p>Enzyme uses the adapter library it has been configured with to render a\ncomponent and its children. The adapter then converts the output to a\nstandardized internal representation (a &quot;React Standard Tree&quot;). Enzyme then wraps\nthis with an object that has methods to query the output and trigger updates.\nThe wrapper object&#39;s API uses CSS-like\n<a href=\"https://airbnb.io/enzyme/docs/api/selector.html\" target=\"_blank\" rel=\"noopener noreferrer\">selectors</a> to locate parts of\nthe output.</p>\n\n\t\t\t\t<h2 id=\"full-shallow-and-string-rendering\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#full-shallow-and-string-rendering\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Full, shallow and string rendering (#full-shallow-and-string-rendering)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Full, shallow and string rendering</span>\n\t\t\t\t</h2><p>Enzyme has three rendering &quot;modes&quot;:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mount<span class=\"token punctuation\">,</span> shallow<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Render the full component tree:</span>\n<span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Render only `MyComponent`'s direct output (ie. \"mock\" child components</span>\n<span class=\"token comment\">// to render only as placeholders):</span>\n<span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Render the full component tree to an HTML string, and parse the result:</span>\n<span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<ul>\n<li><p>The <code>mount</code> function renders the component and all of its descendants in the\nsame way they would be rendered in the browser.</p>\n</li>\n<li><p>The <code>shallow</code> function renders only the DOM nodes that are directly output\nby the component. Any child components are replaced with placeholders that\noutput just their children.</p>\n<p>The advantage of this mode is that you can write tests for components without\ndepending on the details of child components and needing to construct all\nof their dependencies.</p>\n<p>The <code>shallow</code> rendering mode works differently internally with the Preact\nadapter compared to React. See the Differences section below for details.</p>\n</li>\n<li><p>The <code>render</code> function (not to be confused with Preact&#39;s <code>render</code> function!)\nrenders a component to an HTML string. This is useful for testing the output\nof rendering on the server, or rendering a component without triggering any\nof its effects.</p>\n</li>\n</ul>\n\n\t\t\t\t<h2 id=\"triggering-state-updates-and-effects-with-act\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#triggering-state-updates-and-effects-with-act\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Triggering state updates and effects with `act` (#triggering-state-updates-and-effects-with-act)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Triggering state updates and effects with `act`</span>\n\t\t\t\t</h2><p>In the previous example, <code>.simulate(&#39;click&#39;)</code> was used to click on a button.</p>\n<p>Enzyme knows that calls to <code>simulate</code> are likely to change the state of a\ncomponent or trigger effects, so it will apply any state updates or effects\nimmediately before <code>simulate</code> returns. Enzyme does the same when the component\nis rendered initially using <code>mount</code> or <code>shallow</code> and when a component is updated\nusing <code>setProps</code>.</p>\n<p>If however an event happens outside of an Enzyme method call, such as directly\ncalling an event handler (eg. the button&#39;s <code>onClick</code> prop), then Enzyme will not\nbe aware of the change. In this case, your test will need to trigger execution\nof state updates and effects and then ask Enzyme to refresh its view of the\noutput.</p>\n<ul>\n<li>To execute state updates and effects synchronously, use the <code>act</code> function\nfrom <code>preact/test-utils</code> to wrap the code that triggers the updates</li>\n<li>To update Enzyme&#39;s view of rendered output use the wrapper&#39;s <code>.update()</code>\nmethod</li>\n</ul>\n<p>For example, here is a different version of the test for incrementing the\ncounter, modified to call the button&#39;s <code>onClick</code> prop directly, instead of going\nthrough the <code>simulate</code> method:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact/test-utils'</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should increment after \"Increment\" button is clicked'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token attr-name\">initialCount</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> onClick <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Invoke the button's click handler, but this time directly, instead of</span>\n      <span class=\"token comment\">// via an Enzyme API</span>\n      <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Refresh Enzyme's view of the output</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current value: 6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"differences-from-enzyme-with-react\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#differences-from-enzyme-with-react\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Differences from Enzyme with React (#differences-from-enzyme-with-react)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Differences from Enzyme with React</span>\n\t\t\t\t</h2><p>The general intent is that tests written using Enzyme + React can be easily made\nto work with Enzyme + Preact or vice-versa. This avoids the need to rewrite all\nof your tests if you need to switch a component initially written for Preact\nto work with React or vice-versa.</p>\n<p>However there are some differences in behavior between this adapter and Enzyme&#39;s\nReact adapters to be aware of:</p>\n<ul>\n<li>The &quot;shallow&quot; rendering mode works differently under the hood. It is\nconsistent with React in only rendering a component &quot;one level deep&quot; but,\nunlike React, it creates real DOM nodes. It also runs all of the normal\nlifecycle hooks and effects.</li>\n<li>The <code>simulate</code> method dispatches actual DOM events, whereas in the React\nadapters, <code>simulate</code> just calls the <code>on&lt;EventName&gt;</code> prop</li>\n<li>In Preact, state updates (eg. after a call to <code>setState</code>) are batched together\nand applied asynchronously. In React state updates can be applied immediately\nor batched depending on the context. To make writing tests easier, the\nPreact adapter flushes state updates and effects after initial renders and\nupdates triggered via <code>setProps</code> or <code>simulate</code> calls on an adapter. When state updates or\neffects are triggered by other means, your test code may need to manually\ntrigger flushing of effects and state updates using <code>act</code> from\nthe <code>preact/test-utils</code> package.</li>\n</ul>\n<p>For further details, see <a href=\"https://github.com/preactjs/enzyme-adapter-preact-pure#differences-compared-to-enzyme--react\" target=\"_blank\" rel=\"noopener noreferrer\">the Preact adapter's\nREADME</a>.</p>\n"}