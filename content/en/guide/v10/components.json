{"meta":{"title":"Components","description":"Components are the heart of any Preact application. Learn how to create them and use them to compose UIs together","toc":[{"text":"Components","id":"components","level":1},{"text":"Functional Components","id":"functional-components","level":2},{"text":"Class Components","id":"class-components","level":2},{"text":"Lifecycle Methods","id":"lifecycle-methods","level":3},{"text":"Error Boundaries","id":"error-boundaries","level":3},{"text":"Fragments","id":"fragments","level":2}]},"html":"<h1>Components</h1><p>Components represent the basic building block in Preact. They are fundamental in making it easy to build complex UIs from little building blocks. They&#39;re also responsible for attaching state to our rendered output.</p>\n<p>There are two kinds of components in Preact, which we&#39;ll talk about in this guide.</p>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"functional-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#functional-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Functional Components (#functional-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Functional Components</span>\n\t\t\t\t</h2><p>Functional components are plain functions that receive <code>props</code> as the first argument. The function name <strong>must</strong> start with an uppercase letter in order for them to work in JSX.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">My name is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Usage</span>\n<span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>John Doe<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Renders: &lt;div>My name is John Doe.&lt;/div></span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncHJlYWN0JzsKCgpmdW5jdGlvbiBNeUNvbXBvbmVudChwcm9wcykgewogIHJldHVybiA8ZGl2Pk15IG5hbWUgaXMge3Byb3BzLm5hbWV9LjwvZGl2PjsKfQoKLy8gVXNhZ2UKY29uc3QgQXBwID0gPE15Q29tcG9uZW50IG5hbWU9IkpvaG4gRG9lIiAvPjsKCi8vIFJlbmRlcnM6IDxkaXY%2BTXkgbmFtZSBpcyBKb2huIERvZS48L2Rpdj4KcmVuZGVyKEFwcCwgZG9jdW1lbnQuYm9keSk7\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p>Note in earlier versions they were known as <code>&quot;Stateless Components&quot;</code>. This doesn&#39;t hold true anymore with the <a href=\"/guide/v10/hooks\">hooks-addon</a>.</p>\n</blockquote>\n\n\t\t\t\t<h2 id=\"class-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#class-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Class Components (#class-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Class Components</span>\n\t\t\t\t</h2><p>Class components can have state and lifecycle methods. The latter are special methods, that will be called when a component is attached to the DOM or destroyed for example.</p>\n<p>Here we have a simple class component called <code>&lt;Clock&gt;</code> that displays the current time:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Lifecycle: Called whenever our component is created</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// update time every second</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Lifecycle: Called just before our component will be destroyed</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// stop when not renderable</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgQ29tcG9uZW50LCByZW5kZXIgfSBmcm9tICdwcmVhY3QnOwoKCmNsYXNzIENsb2NrIGV4dGVuZHMgQ29tcG9uZW50IHsKCiAgY29uc3RydWN0b3IoKSB7CiAgICBzdXBlcigpOwogICAgdGhpcy5zdGF0ZSA9IHsgdGltZTogRGF0ZS5ub3coKSB9OwogIH0KCiAgLy8gTGlmZWN5Y2xlOiBDYWxsZWQgd2hlbmV2ZXIgb3VyIGNvbXBvbmVudCBpcyBjcmVhdGVkCiAgY29tcG9uZW50RGlkTW91bnQoKSB7CiAgICAvLyB1cGRhdGUgdGltZSBldmVyeSBzZWNvbmQKICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0aW1lOiBEYXRlLm5vdygpIH0pOwogICAgfSwgMTAwMCk7CiAgfQoKICAvLyBMaWZlY3ljbGU6IENhbGxlZCBqdXN0IGJlZm9yZSBvdXIgY29tcG9uZW50IHdpbGwgYmUgZGVzdHJveWVkCiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7CiAgICAvLyBzdG9wIHdoZW4gbm90IHJlbmRlcmFibGUKICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7CiAgfQoKICByZW5kZXIoKSB7CiAgICBsZXQgdGltZSA9IG5ldyBEYXRlKHRoaXMuc3RhdGUudGltZSkudG9Mb2NhbGVUaW1lU3RyaW5nKCk7CiAgICByZXR1cm4gPHNwYW4%2Be3RpbWV9PC9zcGFuPjsKICB9Cn0KCnJlbmRlcig8Q2xvY2sgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSk7Cg%3D%3D\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"lifecycle-methods\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#lifecycle-methods\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Lifecycle Methods (#lifecycle-methods)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Lifecycle Methods</span>\n\t\t\t\t</h3><p>In order to have the clock&#39;s time update every second, we need to know when <code>&lt;Clock&gt;</code> gets mounted to the DOM. <em>If you&#39;ve used HTML5 Custom Elements, this is similar to the <code>attachedCallback</code> and <code>detachedCallback</code> lifecycle methods.</em> Preact invokes the following lifecycle methods if they are defined for a Component:</p>\n<table>\n<thead>\n<tr>\n<th>Lifecycle method</th>\n<th>When it gets called</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>componentWillMount()</code></td>\n<td>(deprecated) before the component gets mounted to the DOM</td>\n</tr>\n<tr>\n<td><code>componentDidMount()</code></td>\n<td>after the component gets mounted to the DOM</td>\n</tr>\n<tr>\n<td><code>componentWillUnmount()</code></td>\n<td>prior to removal from the DOM</td>\n</tr>\n<tr>\n<td><code>componentWillReceiveProps(nextProps, nextContext)</code></td>\n<td>before new props get accepted <em>(deprecated)</em></td>\n</tr>\n<tr>\n<td><code>getDerivedStateFromProps(nextProps, prevState)</code></td>\n<td>just before <code>shouldComponentUpdate</code>. Return object to update state or <code>null</code> to skip update. Use with care.</td>\n</tr>\n<tr>\n<td><code>shouldComponentUpdate(nextProps, nextState, nextContext)</code></td>\n<td>before <code>render()</code>. Return <code>false</code> to skip render</td>\n</tr>\n<tr>\n<td><code>componentWillUpdate(nextProps, nextState, nextContext)</code></td>\n<td>before <code>render()</code> <em>(deprecated)</em></td>\n</tr>\n<tr>\n<td><code>getSnapshotBeforeUpdate(prevProps, prevState)</code></td>\n<td>called just before <code>render()</code>. return value is passed to <code>componentDidUpdate</code>.</td>\n</tr>\n<tr>\n<td><code>componentDidUpdate(prevProps, prevState, snapshot)</code></td>\n<td>after <code>render()</code></td>\n</tr>\n</tbody></table>\n<p>Here&#39;s a visual overview of how they relate to each other (originally posted in <a href=\"https://web.archive.org/web/20191118010106/https://twitter.com/dan_abramov/status/981712092611989509\" target=\"_blank\" rel=\"noopener noreferrer\">a tweet</a> by Dan Abramov):</p>\n<p><img decoding=\"async\" src=\"/guide/components-lifecycle-diagram.png\" alt=\"Diagram of component lifecycle methods\" ></p>\n\n\t\t\t\t<h3 id=\"error-boundaries\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#error-boundaries\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Error Boundaries (#error-boundaries)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Error Boundaries</span>\n\t\t\t\t</h3><p>An error boundary is a component that implements either <code>componentDidCatch()</code> or the static method <code>getDerivedStateFromError()</code> (or both). These are special methods that allow you to catch any errors that happen during rendering and are typically used to provide nicer error messages or other fallback content and save information for logging purposes. It&#39;s important to note that error boundaries cannot catch all errors and those thrown in event handlers or asynchronous code (like a <code>fetch()</code> call) need to be handled separately.</p>\n<p>When an error is caught, we can use these methods to react to any errors and display a nice error message or any other fallback content.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">errored</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">errored</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> errorInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">errorReportingService</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>errored<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Something went badly wrong</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgQ29tcG9uZW50LCByZW5kZXIgfSBmcm9tICdwcmVhY3QnOwoKY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIENvbXBvbmVudCB7CiAgY29uc3RydWN0b3IoKSB7CiAgICBzdXBlcigpOwogICAgdGhpcy5zdGF0ZSA9IHsgZXJyb3JlZDogZmFsc2UgfTsKICB9CgogIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHsKICAgIHJldHVybiB7IGVycm9yZWQ6IHRydWUgfTsKICB9CgogIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHsKICAgIGVycm9yUmVwb3J0aW5nU2VydmljZShlcnJvciwgZXJyb3JJbmZvKTsKICB9CgogIHJlbmRlcihwcm9wcywgc3RhdGUpIHsKICAgIGlmIChzdGF0ZS5lcnJvcmVkKSB7CiAgICAgIHJldHVybiA8cD5Tb21ldGhpbmcgd2VudCBiYWRseSB3cm9uZzwvcD47CiAgICB9CiAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47CiAgfQp9CgpyZW5kZXIoPEVycm9yQm91bmRhcnkgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSk7Cg%3D%3D\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"fragments\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#fragments\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Fragments (#fragments)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Fragments</span>\n\t\t\t\t</h2><p>A <code>Fragment</code> allows you to return multiple elements at once. They solve the limitation of JSX where every &quot;block&quot; must have a single root element. You&#39;ll often encounter them in combination with lists, tables or with CSS flexbox where any intermediate element would otherwise affect styling.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Fragment<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">A</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">B</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">C</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoItems</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">D</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Renders:</span>\n<span class=\"token comment\">// &lt;ul></span>\n<span class=\"token comment\">//   &lt;li>A&lt;/li></span>\n<span class=\"token comment\">//   &lt;li>B&lt;/li></span>\n<span class=\"token comment\">//   &lt;li>C&lt;/li></span>\n<span class=\"token comment\">//   &lt;li>D&lt;/li></span>\n<span class=\"token comment\">// &lt;/ul></span></code></pre>\n\t\t\t\t\t<a class=\"repl-link\" href=\"/repl?code=aW1wb3J0IHsgRnJhZ21lbnQsIHJlbmRlciB9IGZyb20gJ3ByZWFjdCc7CgpmdW5jdGlvbiBUb2RvSXRlbXMoKSB7CiAgcmV0dXJuICgKICAgIDxGcmFnbWVudD4KICAgICAgPGxpPkE8L2xpPgogICAgICA8bGk%2BQjwvbGk%2BCiAgICAgIDxsaT5DPC9saT4KICAgIDwvRnJhZ21lbnQ%2BCiAgKQp9Cgpjb25zdCBBcHAgPSAoCiAgPHVsPgogICAgPFRvZG9JdGVtcyAvPgogICAgPGxpPkQ8L2xpPgogIDwvdWw%2BCik7CgpyZW5kZXIoQXBwLCBjb250YWluZXIpOwovLyBSZW5kZXJzOgovLyA8dWw%2BCi8vICAgPGxpPkE8L2xpPgovLyAgIDxsaT5CPC9saT4KLy8gICA8bGk%2BQzwvbGk%2BCi8vICAgPGxpPkQ8L2xpPgovLyA8L3VsPg%3D%3D\">Run in REPL</a>\n\t\t\t\t</div>\n\t\t\t<p>Note that most modern transpilers allow you to use a shorter syntax for <code>Fragments</code>. The shorter one is a lot more common and is the one you&#39;ll typically encounter.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// This:</span>\n<span class=\"token keyword\">const</span> Foo <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...is the same as this:</span>\n<span class=\"token keyword\">const</span> Bar <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>You can also return arrays from your components:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Columns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Don&#39;t forget to add keys to <code>Fragments</code> if you create them in a loop:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// Without a key, Preact has to guess which elements have</span>\n        <span class=\"token comment\">// changed when re-rendering.</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t"}