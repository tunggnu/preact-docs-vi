{"meta":{"title":"Server-Side Rendering","description":"Render your Preact application on the server to show content to users quicker.","toc":[{"text":"Server-Side Rendering","id":"server-side-rendering","level":1},{"text":"Installation","id":"installation","level":2},{"text":"Basic Usage","id":"basic-usage","level":2},{"text":"Asynchronous Rendering with `Suspense` & `lazy`","id":"asynchronous-rendering-with-suspense--lazy","level":2},{"text":"Shallow Rendering","id":"shallow-rendering","level":2},{"text":"Pretty Mode","id":"pretty-mode","level":2},{"text":"JSX Mode","id":"jsx-mode","level":2}]},"html":"<h1>Server-Side Rendering</h1><p>Server-Side Rendering (often abbreviated as &quot;SSR&quot;) allows you to render your application to an HTML string that can be sent to the client to improve load time. Outside of that there are other scenarios, like testing, where SSR proves really useful.</p>\n<hr>\n<toc></toc><hr>\n\n\t\t\t\t<h2 id=\"installation\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#installation\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Installation (#installation)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Installation</span>\n\t\t\t\t</h2><p>The server-side renderer for Preact lives in its <a href=\"https://github.com/preactjs/preact-render-to-string/\" target=\"_blank\" rel=\"noopener noreferrer\">own repository</a> and can be installed via your packager of choice:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-S</span> preact-render-to-string</code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>After the command above finished, we can start using it right away.</p>\n\n\t\t\t\t<h2 id=\"basic-usage\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#basic-usage\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Basic Usage (#basic-usage)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Basic Usage</span>\n\t\t\t\t</h2><p>Basic functionality can be best explained via a simple snippet:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'preact-render-to-string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Preact User!'</span>\n<span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// &lt;div class=\"foo\">Hello Preact User!&lt;/div></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"asynchronous-rendering-with-suspense--lazy\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#asynchronous-rendering-with-suspense--lazy\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Asynchronous Rendering with `Suspense` & `lazy` (#asynchronous-rendering-with-suspense--lazy)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Asynchronous Rendering with `Suspense` & `lazy`</span>\n\t\t\t\t</h2><p>You may find that you need to render components that are dynamically loaded, like when using <code>Suspense</code> and <code>lazy</code> to facilitate code splitting (along with some other use cases). The async renderer will await the resolution of promises, allowing you to fully construct your HTML string:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// page/home.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Home page</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Suspense<span class=\"token punctuation\">,</span> lazy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact/compat'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Creation of the lazy component</span>\n<span class=\"token keyword\">const</span> HomePage <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./pages/home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Main</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HomePage</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>The above is a very typical setup for a Preact application that uses code splitting, with no changes necessary to make use of server-side rendering.</p>\n<p>To render this, we will deviate slightly from the basic usage example and use the <code>renderToStringAsync</code> export to render our application:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderToStringAsync <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact-render-to-string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Main <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./main'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Rendering of lazy components</span>\n    <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">renderToStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// &lt;h1>Home page&lt;/h1></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Execution &amp; error handling</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"shallow-rendering\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#shallow-rendering\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Shallow Rendering (#shallow-rendering)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Shallow Rendering</span>\n\t\t\t\t</h2><p>For some purposes it&#39;s often preferable to not render the whole tree, but only one level. For that we have a shallow renderer which will print child components by name, instead of their return value.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallow <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact-render-to-string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// &lt;div class=\"foo\">&lt;Foo />&lt;/div></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"pretty-mode\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#pretty-mode\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Pretty Mode (#pretty-mode)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Pretty Mode</span>\n\t\t\t\t</h2><p>If you need to get the rendered output in a more human friendly way, we&#39;ve got you covered! By passing the <code>pretty</code> option, we&#39;ll preserve whitespace and indent the output as expected.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'preact-render-to-string/jsx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">pretty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs:</span>\n<span class=\"token comment\">// &lt;div class=\"foo\"></span>\n<span class=\"token comment\">//   &lt;div>foo&lt;/div></span>\n<span class=\"token comment\">// &lt;/div></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"jsx-mode\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#jsx-mode\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: JSX Mode (#jsx-mode)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>JSX Mode</span>\n\t\t\t\t</h2><p>The JSX rendering mode is especially useful if you&#39;re doing any kind of snapshot testing. It renders the output as if it was written in JSX.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'preact-render-to-string/jsx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> h <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-foo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs: &lt;div data-foo={true} /></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t"}