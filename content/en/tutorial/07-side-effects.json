{"meta":{"title":"Side Effects","prev":"/tutorial/06-context","next":"/tutorial/08-keys","solvable":true,"tutorial":{"setup":"useRealm(function (realm) {\n  var win = realm.globalThis;\n  var prevConsoleLog = win.console.log;\n  win.console.log = function(m, s) {\n    if (/Count is now/.test(m) && s === 1) {\n      solutionCtx.setSolved(true);\n    }\n    return prevConsoleLog.apply(win.console, arguments);\n  };\n\n  return function () {\n    win.console.log = prevConsoleLog;\n  };\n}, []);","initial":"import { render } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('Count is now: ', count)\n  }, []);\n  // ^^ start here!\n\n  return <button onClick={() => setCount(count+1)}>{count}</button>\n}\n\nrender(<App />, document.getElementById(\"app\"));","final":"import { render } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('Count is now: ', count)\n  }, [count]);\n  // ^^ start here!\n\n  return <button onClick={() => setCount(count+1)}>{count}</button>\n}\n\nrender(<App />, document.getElementById(\"app\"));"}},"html":"<h1>Side Effects</h1><p>Side effects are bits of code that run when changes happen in the Virtual\nDOM tree. They don&#39;t follow the standard approach of accepting <code>props</code>\nand returning a new Virtual DOM tree, and often reach out of the tree\nto mutate state or invoke imperative code, like calling into DOM APIs.\nSide effects are also often used as a way to trigger data fetching.</p>\n\n\t\t\t\t<h3 id=\"effects:-side-effects-in-function-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#effects:-side-effects-in-function-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Effects: side effects in function components (#effects:-side-effects-in-function-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Effects: side effects in function components</span>\n\t\t\t\t</h3><p>We&#39;ve already seen one example of side effects in action in a previous\nchapter, when learning about refs and the <code>useRef()</code> hook. Once our\nref was populated with a <code>current</code> property pointing to a DOM element,\nwe needed a way to &quot;trigger&quot; code that would then interact with that\nelement.</p>\n<p>In order to trigger code after rendering, we used a <code>useEffect()</code> hook, which is the most common way to create a side effect from a function\ncomponent:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact/hooks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// the callback here will run after &lt;App> is rendered:</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// access the associated DOM element:</span>\n    input<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Notice the empty array being passed as a second argument to <code>useEffect()</code>.\nEffect callbacks run when any value in that &quot;dependencies&quot; array changes\nfrom one render to the next. For example, the first time a component is\nrendered, all effect callbacks run because there are no previous\n&quot;dependencies&quot; array values to compare to.</p>\n<p>We can add values to the &quot;dependencies&quot; array to trigger an effect\ncallback based on conditions, rather than just when a component is first\nrendered. This is typically used to run code in response to data changes,\nor when a component is removed from the page (&quot;unmounted&quot;).</p>\n<p>Let&#39;s see an example:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact/hooks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;App> was just rendered for the first time'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count value was changed to: '</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//  ^ run this any time `count` changes, and on the first render</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"lifecycle-methods:-class-component-side-effects\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#lifecycle-methods:-class-component-side-effects\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Lifecycle methods: class component side effects (#lifecycle-methods:-class-component-side-effects)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Lifecycle methods: class component side effects</span>\n\t\t\t\t</h3><p>Class components can also define side effects, by implementing any of\nthe available <a href=\"/guide/v10/components#lifecycle-methods\">lifecycle methods</a> provided by Preact. Here are a\nfew of the most commonly used lifecycle methods:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Lifecycle method</th>\n<th align=\"left\">When it runs:</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>componentWillMount</code></td>\n<td align=\"left\">just before a component is first rendered</td>\n</tr>\n<tr>\n<td align=\"left\"><code>componentDidMount</code></td>\n<td align=\"left\">after a component is first rendered</td>\n</tr>\n<tr>\n<td align=\"left\"><code>componentWillReceiveProps</code></td>\n<td align=\"left\">before a component is re-rendered</td>\n</tr>\n<tr>\n<td align=\"left\"><code>componentDidUpdate</code></td>\n<td align=\"left\">after a component is re-rendered</td>\n</tr>\n</tbody></table>\n<p>One of the most common examples of side effect usage in a class component\nis to fetch data when a component is first rendered, then store that data\nin state. The following example shows a component that requests user\ninformation from a JSON API after the first time it gets rendered, then\nshows that information.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this gets called after the component is first rendered:</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// get JSON user info, store in `state.user`:</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// if we haven't received data yet, show a loading indicator:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">// we have data! show the username we got back from the API:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"try-it\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#try-it\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Try it! (#try-it)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Try it!</span>\n\t\t\t\t</h2><p>We&#39;ll keep this exercise simple: change the code sample on the right\nto log every time <code>count</code> changes, rather than only when <code>&lt;App&gt;</code> is\nfirst rendered.</p>\n<solution>\n  <h4>🎉 Congratulations!</h4>\n  <p>You learned how to use side effects in Preact.</p>\n</solution>\n\n\n\n\n\n\n\n\n\n"}