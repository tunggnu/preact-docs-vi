{"meta":{"title":"Virtual DOM","prev":"/tutorial","next":"/tutorial/02-events","solvable":true,"tutorial":{"setup":"useResult(function(result) {\n  var hasEm = result.output.innerHTML.match(/<em>World\\!?<\\/em>/gi);\n  var p = result.output.querySelector('p');\n  var hasColor = p && p.style && p.style.color === 'purple';\n  if (hasEm && hasColor) {\n    solutionCtx.setSolved(true);\n  }\n}, []);","initial":"import { createElement, render } from 'preact';\n\nfunction App() {\n  return (\n    <p class=\"big\">Hello World!</p>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));","final":"import { createElement, render } from 'preact';\n\nfunction App() {\n  return (\n    <p class=\"big\" style={{ color: 'purple' }}>\n      Hello <em>World</em>!\n    </p>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));"}},"html":"<h1>Virtual DOM</h1><p>You might have heard people refer to &quot;Virtual DOM&quot;, and wondered:\nwhat makes it &quot;virtual&quot;? How is a &quot;virtual&quot; DOM different from\nthe real DOM we use when programming for the browser?</p>\n<p>A Virtual DOM is a simple description of a tree structure using objects:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// a &lt;p> element</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// with class=\"big\"</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'Hello World!'</span> <span class=\"token comment\">// and the text \"Hello World!\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Libraries like Preact provide a way to construct these descriptions, which can\nthen be compared against the browser&#39;s DOM tree. As each part of the tree is\ncompared, and the browser&#39;s DOM tree is updated to match the structure described\nby the Virtual DOM tree.</p>\n<p>This is a useful tool, because it lets us compose user interfaces <em>declaratively</em>\nrather than <em>imperatively</em>. Instead of describing <em>how</em> to update the DOM in\nresponse to things like keyboard or mouse input, we only need to describe <em>what</em>\nthe DOM should look like after that input is received. It means we can repeatedly\ngive Preact descriptions of tree structures, and it will update the browser&#39;s DOM\ntree to match each new description â€“ regardless of its current structure. </p>\n<p>In this chapter, we&#39;ll learn how to create Virtual DOM trees, and how to tell\nPreact to update the DOM to match those trees.</p>\n\n\t\t\t\t<h3 id=\"creating-virtual-dom-trees\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#creating-virtual-dom-trees\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Creating Virtual DOM trees (#creating-virtual-dom-trees)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Creating Virtual DOM trees</span>\n\t\t\t\t</h3><p>There are a few ways to create Virtual DOM trees:</p>\n<ul>\n<li><code>createElement()</code>: a function provided by Preact</li>\n<li><a href=\"https://en.wikipedia.org/wiki/JSX_(JavaScript)\" target=\"_blank\" rel=\"noopener noreferrer\">JSX</a>: HTML-like syntax that can be compiled to JavaScript</li>\n<li><a href=\"https://github.com/developit/htm\" target=\"_blank\" rel=\"noopener noreferrer\">HTM</a>: HTML-like syntax you can write directly in JavaScript</li>\n</ul>\n<p>It&#39;s useful to start things off with the simplest approach, which would be to call Preact&#39;s <code>createElement()</code> function directly:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createElement<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// a &lt;p> element</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'big'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// with class=\"big\"</span>\n  <span class=\"token string\">'Hello World!'</span>    <span class=\"token comment\">// and the text \"Hello World!\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vdom<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>The code above creates a Virtual DOM &quot;description&quot; of a paragraph element.\nThe first argument to createElement is the HTML element name.\nThe second argument is the element&#39;s &quot;props&quot; - an object containing attributes\n(or properties) to set on the element.\nAny additional arguments are children for the element, which can be strings (like\n<code>&#39;Hello World!&#39;</code>) or Virtual DOM elements from additional <code>createElement()</code> calls.</p>\n<p>The last line tells Preact to build a real DOM tree that matches our Virtual DOM\n&quot;description&quot;, and to insert that DOM tree into the <code>&lt;body&gt;</code> of a web page.</p>\n\n\t\t\t\t<h3 id=\"now-with-more-jsx\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#now-with-more-jsx\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Now with more JSX! (#now-with-more-jsx)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Now with more JSX!</span>\n\t\t\t\t</h3><p>We can rewrite the previous example using <a href=\"https://en.wikipedia.org/wiki/JSX_(JavaScript)\" target=\"_blank\" rel=\"noopener noreferrer\">JSX</a> without changing its functionality.\nJSX lets us describe our paragraph element using HTML-like syntax, which can help\nkeep things readable as we describe more complex trees. The drawback of JSX is that\nour code is no longer written in JavaScript, and must be compiled by a tool like <a href=\"https://babeljs.io\" target=\"_blank\" rel=\"noopener noreferrer\">Babel</a>. Compilers do the work of converting the JSX example below into the exact\n<code>createElement()</code> code we saw in the previous example.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createElement<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>big<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello World!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vdom<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>It looks a lot more like HTML now!</p>\n<p>There&#39;s one final thing to keep in mind about JSX: code inside of a JSX element\n(within the angle brackets) is special syntax and not JavaScript. To use JavaScript\nsyntax like numbers or variables, you first need to &quot;jump&quot; back out from JSX using\nan <code>{expression}</code> - similar to fields in a template. The example below shows two\nexpressions: one to set <code>class</code> to a randomized string, and another to calculate\na number.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> maybeBig <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">.5</span> <span class=\"token operator\">?</span> <span class=\"token string\">'big'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'small'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>maybeBig<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span><span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n                 <span class=\"token comment\">// ^---JS---^       ^--JS--^</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>If we were to <code>render(vdom, document.body)</code>, the text &quot;Hello 42!&quot; would be shown.</p>\n\n\t\t\t\t<h3 id=\"once-more-with-htm\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#once-more-with-htm\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Once more with HTM (#once-more-with-htm)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Once more with HTM</span>\n\t\t\t\t</h3><p><a href=\"https://github.com/developit/htm\" target=\"_blank\" rel=\"noopener noreferrer\">HTM</a> is an alternative to JSX that uses standard JavaScript tagged templates,\nremoving the need for a compiler. If you haven&#39;t encountered tagged templates,\nthey&#39;re a special type of String literal that can contain <code>${expression}</code> fields:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Quantity: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> units</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"Quantity: 42 units\"</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>HTM uses <code>${expression}</code> instead of the <code>{expression}</code> syntax from JSX, which\ncan make it clearer what parts of your code are HTM/JSX elements, and what\nparts are plain JavaScript:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> html <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'htm/preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> maybeBig <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">.5</span> <span class=\"token operator\">?</span> <span class=\"token string\">'big'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'small'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p class=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>maybeBig<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!&lt;/p></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// ^--JS--^          ^-JS-^</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>All of these examples produce the same result: a Virtual DOM tree that can\nbe given to Preact to create or update an existing DOM tree.</p>\n<hr>\n\n\t\t\t\t<h3 id=\"detour:-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#detour:-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Detour: Components (#detour:-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Detour: Components</span>\n\t\t\t\t</h3><p>We&#39;ll get into a lot more detail about Components later in this tutorial, but\nfor now it&#39;s important to know that HTML elements like <code>&lt;p&gt;</code> are just one of\n<em>two</em> types of Virtual DOM elements. The other type is a Component, which is\na Virtual DOM element where the type is a function instead of a string like <code>p</code>.</p>\n<p>Components are the building blocks of Virtual DOM applications. For now, we&#39;ll\ncreate a very simple component by moving our JSX into a function:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createElement <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>big<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello World!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>When passing a component to <code>render()</code>, it&#39;s important to let Preact do the\ninstantiation rather than invoking your component directly, which will break\nin unexpected ways:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// DON'T: Invoking components directly means they won't be counted as a</span>\n<span class=\"token comment\">// VNode and hence not be able to use functionality relating to vnodes.</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ERROR</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ERROR</span>\n\n<span class=\"token comment\">// DO: Passing components using createElement() or JSX allows Preact to render correctly:</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"try-it\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#try-it\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Try it! (#try-it)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Try it!</span>\n\t\t\t\t</h2><p>On the right side of this page, you&#39;ll see the code from our previous example\nat the top. Below that is a box with the result of running that code. You can\nedit the code and see how your changes affect (or break!) the result as you go.</p>\n<p>To test what you&#39;ve learned in this chapter, try giving the text some more pizazz!\nMake the word <code>World</code> stand out by wrapping it in HTML tags: <code>&lt;em&gt;</code> and <code>&lt;/em&gt;</code>.</p>\n<p>Then, make all of the text <span style=\"color:purple\">purple</span> by adding a\n<code>style</code> prop. The <code>style</code> prop is special, and allows an object value with\none or more CSS properties to set on the element. To pass an object as a prop value, you&#39;ll need to use an <code>{expression}</code>, like <code>style={{ property: &#39;value&#39; }}</code>.</p>\n<solution>\n  <h4>ðŸŽ‰ Congratulations!</h4>\n  <p>We've made things appear on the screen. Next we'll make them interactive.</p>\n</solution>\n\n\n\n\n\n\n\n\n\n"}