{"meta":{"title":"Refs","prev":"/tutorial/04-state","next":"/tutorial/06-context","solvable":true,"tutorial":{"setup":"function patch(input) {\n  if (input.__patched) return;\n  input.__patched = true;\n  var old = input.focus;\n  input.focus = function() {\n    solutionCtx.setSolved(true);\n    return old.call(this);\n  };\n}\n\nuseResult(function (result) {\n  var expectedInput;\n  var timer;\n  [].forEach.call(result.output.querySelectorAll('input'), patch);\n\n  var options = require('preact').options;\n\n  var oe = options.event;\n  options.event = function(e) {\n    if (e.currentTarget.localName !== 'button') return;\n    clearTimeout(timer);\n    var input = e.currentTarget.parentNode.parentNode.querySelector('input');\n    expectedInput = input;\n    if (input) patch(input);\n    timer = setTimeout(function() {\n      if (expectedInput === input) {\n        expectedInput = null;\n      }\n    }, 10);\n    if (oe) return oe.apply(this, arguments);\n  }\n\n  return function () {\n    options.event = oe;\n  };\n}, []);","initial":"import { render } from 'preact';\nimport { useRef } from 'preact/hooks';\n\nfunction App() {\n  function onClick() {\n\n  }\n\n  return (\n    <div>\n      <input defaultValue=\"Hello World!\" />\n      <button onClick={onClick}>Focus input</button>\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));","final":"import { render } from 'preact';\nimport { useRef } from 'preact/hooks';\n\nfunction App() {\n  const input = useRef();\n\n  function onClick() {\n    input.current.focus();\n  }\n\n  return (\n    <div>\n      <input ref={input} defaultValue=\"Hello World!\" />\n      <button onClick={onClick}>Focus input</button>\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));"}},"html":"<h1>Refs</h1><p>As we learned in the first chapter, the DOM provides an imperative API,\nwhich lets us make changes by calling functions on elements. One example\nwhere we might need to access the imperative DOM API from a Preact\ncomponent would be to automatically move focus to an input element.</p>\n<p>The <code>autoFocus</code> prop (or <code>autofocus</code> attribute) can be used to focus an\ninput the first time it is rendered, however there are situations where\nwe want to move focus to an input at a specific time, or in response to\na specific event.</p>\n<p>For these cases where we need to interact directly with DOM elements,\nwe can use a feature called &quot;refs&quot;. A ref is a plain JavaScript object\nwith a <code>current</code> property that point to any value. JavaScript objects are\npassed by reference, which means that any function with access to a ref\nobject can get or set its value using the <code>current</code> property. Preact does\nnot track changes to ref objects, so they can be used to store information\nduring rendering, which can then be accessed later by any function with\naccess to the ref object.</p>\n<p>We can see what direct usage of the ref feature looks like without rendering\nanything:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span>\n\n<span class=\"token comment\">// create a ref:</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">'initial value'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// { current: 'initial value' }</span>\n\n<span class=\"token comment\">// read a ref's current value:</span>\nref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> <span class=\"token string\">'initial value'</span>\n\n<span class=\"token comment\">// update a ref's current value:</span>\nref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token string\">'new value'</span>\n\n<span class=\"token comment\">// pass refs around:</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { current: 'new value' }</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>What makes refs useful in Preact is that a ref object can be passed to a\nVirtual DOM element during rendering, and Preact will set the ref&#39;s value\n(its <code>current</code> property) to the corresponding HTML element. Once set,\nwe can use the ref&#39;s current value to access and modify the HTML element:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a ref:</span>\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// pass the ref as a prop on a Virtual DOM element:</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// access the associated DOM element:</span>\ninput<span class=\"token punctuation\">.</span>current <span class=\"token comment\">// an HTML &lt;input> element</span>\ninput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// focus the input!</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Using <code>createRef()</code> globally isn&#39;t recommended, since multiple renders\nwill overwrite the ref&#39;s current value. Instead, it&#39;s best to store\nrefs as class properties:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRef<span class=\"token punctuation\">,</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  input <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// this function runs after &lt;App> is rendered</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// access the associated DOM element:</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>For function components, a <code>useRef()</code> hook provides a convenient way\nto create a ref and access that same ref on subsequent renders. The\nfollowing example also shows how to use the <code>useEffect()</code> hook to\ninvoke a callback after our component is rendered, in which our\nref&#39;s current value will then be set to the HTML input element:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact/hooks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create or retrieve our ref:  (hook slot 0)</span>\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// the callback here will run after &lt;App> is rendered:</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// access the associated DOM element:</span>\n    input<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Remember, refs aren&#39;t limited to storing only DOM elements. They can be used\nto store information between renders of a component without setting state\nthat would cause additional rendering. We&#39;ll see some uses for that in a\nlater chapter.</p>\n\n\t\t\t\t<h2 id=\"try-it\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#try-it\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Try it! (#try-it)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Try it!</span>\n\t\t\t\t</h2><p>Now let&#39;s put this to practice by creating a button that, when clicked, focuses\nan input field by accessing it using a ref.</p>\n<solution>\n  <h4>🎉 Congratulations!</h4>\n  <p><code>pro = createRef()</code> → <code>pro.current = 'you'</code></p>\n</solution>\n\n\n\n\n\n\n\n\n"}