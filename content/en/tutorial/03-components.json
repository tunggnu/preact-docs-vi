{"meta":{"title":"Components","prev":"/tutorial/02-events","next":"/tutorial/04-state","solvable":true,"tutorial":{"setup":"useRealm(function (realm) {\n  var options = require('preact').options;\n  var win = realm.globalThis;\n  var prevConsoleLog = win.console.log;\n  var hasComponent = false;\n  var check = false;\n\n  win.console.log = function() {\n    if (hasComponent && check) {\n      solutionCtx.setSolved(true);\n    }\n    return prevConsoleLog.apply(win.console, arguments);\n  };\n\n  var e = options.event;\n  options.event = function(e) {\n    if (e.type === 'click') {\n      check = true;\n      setTimeout(() => check = false);\n    }\n  };\n\n  var r = options.__r;\n  options.__r = function(vnode) {\n    if (typeof vnode.type === 'function' && /MyButton/.test(vnode.type)) {\n      hasComponent = true;\n    }\n  }\n\n  return function () {\n    options.event = e;\n    options.__r = r;\n    win.console.log = prevConsoleLog;\n  };\n}, []);","initial":"import { render } from \"preact\";\n\nfunction MyButton(props) {\n  // start here!\n}\n\nfunction App() {\n  const clicked = () => {\n    console.log('Hello!')\n  }\n\n  return (\n    <div>\n      <p class=\"count\">Count:</p>\n      <button style={{ color: 'purple' }} onClick={clicked}>Click me</button>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));","final":"import { render } from \"preact\";\n\nfunction MyButton(props) {\n  return <button style={props.style} onClick={props.onClick}>{props.children}</button>\n}\n\nfunction App() {\n  const clicked = () => {\n    console.log('Hello!')\n  }\n\n  return (\n    <div>\n      <p class=\"count\">Count:</p>\n      <MyButton style={{ color: 'purple' }} onClick={clicked}>Click me</MyButton>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));"}},"html":"<h1>Components</h1><p>As we alluded to in part one of this tutorial, the key building block\nin Virtual DOM applications is the Component. A Component is a self-contained\npiece of an application that can be rendered as part of the Virtual DOM\ntree just like an HTML element. You can think of a Component like a function\ncall: both are mechanisms that allow code reuse and indirection.</p>\n<p>To illustrate, let&#39;s create a simple component called <code>MyButton</code> that\nreturns a Virtual DOM tree describing an HTML <code>&lt;button&gt;</code> element:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>We can use this component in an application by referencing it in JSX:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>MyButton text<span class=\"token operator\">=</span><span class=\"token string\">\"Click Me!\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// remember createElement? here's what the line above compiles to:</span>\n<span class=\"token keyword\">let</span> vdom <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>MyButton<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Click Me!\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Anywhere you use JSX to describe trees of HTML, you can also describe trees\nof Components. The difference is that a component is described in JSX using\na name beginning with an uppercase character that corresponds to the\ncomponent&#39;s name (a JavaScript variable).</p>\n<p>As Preact renders the Virtual DOM tree described by your JSX, each component\nfunction it encounters will be invoked at that spot in the tree. As an example,\nwe can render our <code>MyButton</code> component into the body of a web page by passing\na JSX element describing that component to <code>render()</code>:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Click me!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"nesting-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#nesting-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Nesting Components (#nesting-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Nesting Components</span>\n\t\t\t\t</h3><p>Components can reference other components in Virtual DOM tree they return.\nThis creates a tree of components:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MediaPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Play<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Stop<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MediaPlayer</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>We can use this technique to render different trees of components for\ndifferent scenarios. Let&#39;s make that <code>MediaPlayer</code> show a &quot;Play&quot; button\nwhen no sound is playing, and a &quot;Stop&quot; button when sound is playing:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MediaPlayer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Stop<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Play<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MediaPlayer</span></span> <span class=\"token attr-name\">playing</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// renders &lt;button>Play&lt;/button></span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MediaPlayer</span></span> <span class=\"token attr-name\">playing</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// renders &lt;button>Stop&lt;/button></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<blockquote>\n<p><strong>Remember:</strong> <code>{curly}</code> braces in JSX let us jump back into plain JavaScript.\nHere we&#39;re using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"noopener noreferrer\">ternary</a> expression to show different buttons based on\nthe value of the <code>playing</code> prop.</p>\n</blockquote>\n\n\t\t\t\t<h3 id=\"component-children\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#component-children\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Component Children (#component-children)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Component Children</span>\n\t\t\t\t</h3><p>Components can also be nested just like HTML elements. One of the reasons\nComponents are a powerful primitive is because they let us apply custom logic\nto control how Virtual DOM elements nested within a component should be rendered.</p>\n<p>The way this works is deceptively simple: any Virtual DOM elements nested\nwithin a component in JSX are passed to that component as a special <code>children</code>\nprop. A component can choose where to place its children by referencing them in\nJSX using a <code>{children}</code> expression. Or, components can simply return the\n<code>children</code> value, and Preact will render those Virtual DOM elements right where\nthat Component was placed in the Virtual DOM tree.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>children  <span class=\"token comment\">// [&lt;a />, &lt;b />]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Thinking back to the previous example, our <code>MyButton</code> component expected\na <code>text</code> prop that was inserted into a <code>&lt;button&gt;</code> element as its display\ntext. What if we wanted to display an image instead of text?</p>\n<p>Let&#39;s rewrite <code>MyButton</code> to allow nesting using the <code>children</code> prop:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon.png<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      Click Me!\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Now that we&#39;ve seen a few examples of components rendering other\ncomponents, hopefully it&#39;s starting to become clear how nested\ncomponents let us assemble complex applications out of many smaller\nindividual pieces.</p>\n<hr>\n\n\t\t\t\t<h3 id=\"types-of-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#types-of-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Types of Components (#types-of-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Types of Components</span>\n\t\t\t\t</h3>\n\n<p>So far, we&#39;ve seen Components that are functions. Function components\ntake in <code>props</code> as their input, and return a Virtual DOM tree as\ntheir output. Components can also be written as JavaScript classes,\nwhich get instantiated by Preact and provide a <code>render()</code> method that\nworks much like a function component.</p>\n<p>Class components are created by extending Preact&#39;s <code>Component</code> base class.\nIn the example below, notice how <code>render()</code> takes <code>props</code> as its input and\nreturns a Virtual DOM tree as its output - just like a function component!</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click Me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>The reason we might use a class to define a component is to keep track of\nthe <em>lifecycle</em> of our component. Each time Preact encounters a component\nwhen rendering a Virtual DOM tree, it will create a new instance of our\nclass (<code>new MyButton()</code>).</p>\n<p>However, if you recall from chapter one - Preact can be repeatedly given\nnew Virtual DOM trees. Each time we give Preact a new tree, it gets\ncompared against the previous tree to determine what changed between the\ntwo, and those changes are applied to the page.</p>\n<p>When a component is defined using a class, any <em>updates</em> to that component\nin the tree will reuse the same class instance. That means it&#39;s possible to\nstore data inside a class component that will be available the next time\nits <code>render()</code> method is called.</p>\n<p>Class components can also implement a number of <a href=\"/guide/v10/components#lifecycle-methods\">lifecycle methods</a>, which\nPreact will call in response to changes in the Virtual DOM tree:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from a new &lt;MyButton> component!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A &lt;MyButton> component was updated!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click Me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// logs: \"Hello from a new &lt;MyButton> component!\"</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click Me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// logs: \"A &lt;MyButton> component was updated!\"</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>The lifecycle of class components makes them a useful tool for building\npieces of an application that respond to changes, rather than strictly\nmapping <code>props</code> to trees. They also provide a way to store information\nseparately at each location where they&#39;re placed in the Virtual DOM tree.\nIn the next chapter, we&#39;ll see how components can update their section of\nthe tree whenever they want to change it.</p>\n<hr>\n\n\t\t\t\t<h2 id=\"try-it\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#try-it\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Try it! (#try-it)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Try it!</span>\n\t\t\t\t</h2><p>To practise, let&#39;s combine what we&#39;ve learned about components with our\nevent skills from the previous two chapters!</p>\n<p>Create a <code>MyButton</code> component that accepts <code>style</code>, <code>children</code> and <code>onClick</code>\nprops, and returns an HTML <code>&lt;button&gt;</code> element with those props applied.</p>\n<solution>\n  <h4>🎉 Congratulations!</h4>\n  <p>You're on your way to being a component pro!</p>\n</solution>\n\n\n\n\n\n\n\n\n\n"}