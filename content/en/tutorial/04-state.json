{"meta":{"title":"State","prev":"/tutorial/03-components","next":"/tutorial/05-refs","solvable":true,"tutorial":{"setup":"useResult(function () {\n  var options = require('preact').options;\n\n  var oe = options.event;\n  options.event = function(e) {\n    if (oe) oe.apply(this, arguments);\n\n    if (e.currentTarget.localName !== 'button') return;\n    var root = e.currentTarget.parentNode.parentNode;\n    var text = root.innerText.match(/Count:\\s*([\\w.-]*)/i);\n    if (!text) return;\n    if (!text[1].match(/^-?\\d+$/)) {\n      return console.warn('Tip: it looks like you\\'re not rendering {count} anywhere.');\n    }\n    setTimeout(function() {\n      var text2 = root.innerText.match(/Count:\\s*([\\w.-]*)/i);\n      if (!text2) {\n        return console.warn('Tip: did you remember to render {count}?');\n      }\n      if (text2[1] == text[1]) {\n        return console.warn('Tip: remember to call the \"setter\" function to change the value of `count`.');\n      }\n      if (!text2[1].match(/^-?\\d+$/)) {\n        return console.warn('Tip: it looks like `count` is being set to something other than a number.');\n      }\n\n      if (Number(text2[1]) === Number(text[1]) + 1) {\n        solutionCtx.setSolved(true);\n      }\n    }, 10);\n  }\n\n  return function () {\n    options.event = oe;\n  };\n}, []);","initial":"import { render } from 'preact';\nimport { useState } from 'preact/hooks';\n\nfunction MyButton(props) {\n  return <button style={props.style} onClick={props.onClick}>{props.children}</button>\n}\n\nfunction App() {\n  const clicked = () => {\n    // increment count by 1 here\n  }\n\n  return (\n    <div>\n      <p class=\"count\">Count:</p>\n      <MyButton style={{ color: 'purple' }} onClick={clicked}>Click me</MyButton>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));","final":"import { render } from 'preact';\nimport { useState } from 'preact/hooks';\n\nfunction MyButton(props) {\n  return <button style={props.style} onClick={props.onClick}>{props.children}</button>\n}\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  const clicked = () => {\n    setCount(count + 1)\n  }\n\n  return (\n    <div>\n      <p class=\"count\">Count: {count}</p>\n      <MyButton style={{ color: 'purple' }} onClick={clicked}>Click me</MyButton>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));"}},"html":"<h1>State</h1><p>Now that we know how to create HTML elements and components, and how to\npass props and event handlers to both using JSX, it&#39;s time to learn how\nto update the Virtual DOM tree.</p>\n<p>As we alluded to in the previous chapter, both function and class components\ncan have <strong>state</strong> - data stored by a component that is used to change\nits Virtual DOM tree. When a component updates its state, Preact re-renders\nthat component using the updated state value. For function components, this\nmeans Preact will re-invoke the function, whereas for class components it\nwill only re-invoke the class&#39; <code>render()</code> method. Let&#39;s look at an example\nof each.</p>\n\n\t\t\t\t<h2 id=\"state-in-class-components\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#state-in-class-components\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: State in class components (#state-in-class-components)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>State in class components</span>\n\t\t\t\t</h2><p>Class components have a <code>state</code> property, which is an object that holds\ndata the component can use when its <code>render()</code> method is called. A component\ncan call <code>this.setState()</code> to update its <code>state</code> property and request that\nit be re-rendered by Preact.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">clicked</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">clicked</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicked <span class=\"token operator\">?</span> <span class=\"token string\">'Clicked'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'No clicks yet'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Clicking the button calls <code>this.setState()</code>, which causes Preact to\ncall the class&#39; <code>render()</code> method again. Now that <code>this.state.clicked</code>\nis <code>true</code>, the <code>render()</code> method returns a Virtual DOM tree containing\nthe text &quot;Clicked&quot; instead of &quot;No clicks yet&quot;, causing Preact to update\nthe button&#39;s text in the DOM.</p>\n\n\t\t\t\t<h2 id=\"state-in-function-components-using-hooks\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#state-in-function-components-using-hooks\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: State in function components using hooks (#state-in-function-components-using-hooks)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>State in function components using hooks</span>\n\t\t\t\t</h2><p>Function components can have state too! While they don&#39;t have a\n<code>this.state</code> property like class components, a tiny add-on module\nis included with Preact that provides functions for storing\nand working with state inside function components, called &quot;hooks&quot;.</p>\n<p>Hooks are special functions that can be called from within a function\ncomponent. They&#39;re special because they <strong>remember information across\nrenders</strong>, a bit like properties and methods on a class. For example,\nthe <code>useState</code> hook returns an Array containing a value and a &quot;setter&quot;\nfunction that can be called to update that value. When a component is\ninvoked (re-rendered) multiple times, any <code>useState()</code> calls it makes\nwill return the exact same Array each time.</p>\n<blockquote>\n<p>ℹ️ <strong><em>How do hooks actually work?</em></strong></p>\n<p>Behind the scenes, hook functions like <code>setState</code> work by storing\ndata in a sequence of &quot;slots&quot; associated with each component\nin the Virtual DOM tree. Calling a hook function uses up one slot,\nand increments an internal &quot;slot number&quot; counter so the next call\nuses the next slot. Preact resets this counter before invoking each\ncomponent, so each hook call gets associated with the same slot when\na component is rendered multiple times.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// slot 0</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// slot 1</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>online<span class=\"token punctuation\">,</span> setOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// slot 2</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>This is called call site ordering, and it&#39;s the reason why hooks must\nalways be called in the same order within a component, and cannot be\ncalled conditionally or within loops.</p>\n</blockquote>\n<p>Let&#39;s see an example of the <code>useState</code> hook in action:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'preact/hooks'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyButton</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>clicked<span class=\"token punctuation\">,</span> setClicked<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setClicked</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>clicked <span class=\"token operator\">?</span> <span class=\"token string\">'Clicked'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'No clicks yet'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Clicking the button calls <code>setClicked(true)</code>, which updates the state field\ncreated by our <code>useState()</code> call, which in turn causes Preact to re-render\nthis component. When the component is rendered (invoked) a second time,\nthe value of the <code>clicked</code> state field will be <code>true</code>, and the returned\nVirtual DOM will have the text &quot;Clicked&quot; instead of &quot;No clicks yet&quot;.\nThis will cause Preact to update the button&#39;s text in the DOM.</p>\n<hr>\n\n\t\t\t\t<h2 id=\"try-it\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#try-it\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Try it! (#try-it)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Try it!</span>\n\t\t\t\t</h2><p>Let&#39;s try creating a counter, starting from the code we wrote in the previous\nchapter. We&#39;ll need to store a <code>count</code> number in state, and increment its value\nby <code>1</code> when a button is clicked.</p>\n<p>Since we used a function component in the previous chapter, it may be easiest to\nuse hooks, though you can pick whichever method of storing state you prefer.</p>\n<solution>\n  <h4>🎉 Congratulations!</h4>\n  <p>You learned how to use state!</p>\n</solution>\n\n\n\n\n\n\n\n\n\n"}