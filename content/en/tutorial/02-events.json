{"meta":{"title":"Events","prev":"/tutorial/01-vdom","next":"/tutorial/03-components","solvable":true,"tutorial":{"setup":"useRealm(function (realm) {\n  var win = realm.globalThis;\n  var prevConsoleLog = win.console.log;\n  win.console.log = function() {\n    solutionCtx.setSolved(true);\n    return prevConsoleLog.apply(win.console, arguments);\n  };\n\n  return function () {\n    win.console.log = prevConsoleLog;\n  };\n}, []);","initial":"import { render } from \"preact\";\n\nfunction App() {\n  return (\n    <div>\n      <p class=\"count\">Count:</p>\n      <button>Click Me!</button>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));","final":"import { render } from \"preact\";\n\nfunction App() {\n  const clicked = () => {\n    console.log('hi')\n  }\n\n  return (\n    <div>\n      <p class=\"count\">Count:</p>\n      <button onClick={clicked}>Click Me!</button>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));"}},"html":"<h1>Events</h1><p>Events are how we make applications interactive, responding to inputs like\nkeyboard and mouse, and reacting to changes like an image loading. Events\nwork the same way in Preact as they do in the DOM â€“ any event type or behavior\nyou might find on <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events\" target=\"_blank\" rel=\"noopener noreferrer\">MDN</a> can be used in Preact. As an example, here&#39;s\nhow event handlers are typically registered using the imperative DOM API:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> myButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-button'</span><span class=\"token punctuation\">)</span>\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> clicked<span class=\"token punctuation\">)</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Where Preact differs from the DOM API is how event handlers are registered.\nIn Preact, event handlers are registered declaratively as props on an element,\njust like <code>style</code> and <code>class</code>. In general, any prop that has a name beginning\nwith &quot;on&quot; is an event handler. The value of an event handler prop is the handler\nfunction to be called when that event occurs.</p>\n<p>For example, we can listen for the &quot;click&quot; event on a button by adding an <code>onClick</code>\nprop with our handler function as its value:</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>clicked<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t<p>Event handler names are case-sensitive, like all prop names. However, Preact will\ndetect when you&#39;re registering a standard event type on an Element (click, change,\ntouchmove, etc), and uses the correct case behind the scenes. That&#39;s why\n<code>&lt;button onClick={..}&gt;</code> works even though the event is <code>&quot;click&quot;</code> (lower case).</p>\n<hr>\n\n\t\t\t\t<h2 id=\"try-it\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#try-it\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Try it! (#try-it)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Try it!</span>\n\t\t\t\t</h2><p>To complete this chapter, try adding your own click handler to the JSX for the\nbutton element on the right. In your handler, log a message using <code>console.log()</code> like we did above.</p>\n<p>Once your code runs, click the button to call your event handler and move to the next chapter.</p>\n<solution>\n  <h4>ðŸŽ‰ Congratulations!</h4>\n  <p>You just learned how to handle events in Preact.</p>\n</solution>\n\n\n\n\n\n\n\n\n\n"}