{"meta":{"title":"Preact X, a story of stability","date":"2024-05-24","authors":["Jovi De Croock"]},"html":"<h1>Preact X, a story of stability</h1><p>A lot of you have been waiting for <a href=\"https://github.com/preactjs/preact/issues/2621\" target=\"_blank\" rel=\"noopener noreferrer\">Preact 11</a>, announced in an issue opened\nway back in July 2020, and to be clear I was one of the most excited people for v11.\nWhen we started thinking about Preact 11 we believed that there was no way to introduce the changes we had in mind\nin Preact X without breaking changes, some of the things we had in mind:</p>\n<ul>\n<li>Using a backing VNode structure to reduce GC, by doing this we&#39;d only use the result of <code>h()</code> to update our backing-node.</li>\n<li>Reconciler performance, to allow optimized paths for mounting/unmounting/etc</li>\n<li>Some changes like removing <code>px</code> suffixing, <code>forwardRef</code> and breaking IE11 support.</li>\n<li>Keeping ref in props.</li>\n<li>Addressing event/child diffing bugs.</li>\n</ul>\n<p>These were our initial goals for v11, but upon going down this path, we realised that many of those changes weren&#39;t actually breaking changes and could be released directly in v10 in a non-breaking way. Only the third point, removing the <code>px</code> suffix and passing <code>ref</code> directly in props as well as dropping IE11, fall into the breaking changes category. We went with releasing the other features in the stable v10 release line, which allows any Preact user to benefit from them immediately without having to change their code.</p>\n<p>Preact has a much bigger userbase today compared to when we made the original plans for v11. It enjoys wide usage in many small to big companies for mission critical software. We really want to be sure that any breaking changes we may introduce are absolutely worth the cost of moving the whole ecosystem over to it.</p>\n<p>As we were <a href=\"https://github.com/preactjs/preact/tree/v11\" target=\"_blank\" rel=\"noopener noreferrer\">experimenting</a> we went a new type of diffing, named\n<a href=\"https://github.com/preactjs/preact/pull/3388\" target=\"_blank\" rel=\"noopener noreferrer\">skew based diffing</a>, we saw real performance\nimprovements as well as it fixing a bunch of long-running bugs. As time went on and we invested more time in\nthese experiments for Preact 11, we started noticing that the improvements we were landing didn&#39;t need to be exclusive to Preact 11.</p>\n\n\t\t\t\t<h2 id=\"releases\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#releases\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Releases (#releases)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Releases</span>\n\t\t\t\t</h2><p>Since the aforementioned Preact 11 issue there have been 18 (!!) minor versions of Preact X.\nMany of them have been directly inspired by work done on Preact 11. Let&#39;s go over a few and look at the impact.</p>\n\n\t\t\t\t<h3 id=\"1050\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#1050\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 10.5.0 (#1050)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>10.5.0</span>\n\t\t\t\t</h3><p>The introduction of <a href=\"https://github.com/preactjs/preact/pull/2754\" target=\"_blank\" rel=\"noopener noreferrer\">resumed hydration</a> -- this functionality basically allows suspending during\nthe re-hydration of your component tree. This means that for instance in the following component tree we&#39;ll re-hydrate and make the <code>Header</code>\ninteractive while the <code>LazyArticleHeader</code> suspends, in the meanwhile the server-rendered DOM will stay on screeen. When the lazy-load finishes\nwe&#39;ll continue re-hydrating, our <code>Header</code> and <code>LazyArticleHeader</code> can be interacted with while our <code>LazyContents</code> resolve. This is a pretty\npowerful feature to make your most important stuff interactive while not overloading the bundle-size/download-size of your initial bundle.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyArticleHeader</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyContents</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  )\n}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h3 id=\"1080\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#1080\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 10.8.0 (#1080)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>10.8.0</span>\n\t\t\t\t</h3><p>In 10.8.0 we introduced <a href=\"https://github.com/preactjs/preact/pull/3553\" target=\"_blank\" rel=\"noopener noreferrer\">state settling</a>, this would ensure that if a component updates hook-state\nduring render that we&#39;d pick this up, cancel prior effects and render on. We&#39;d of course have to ensure that this didn&#39;t loop but this feature\nreduces the amount of renders that are queued up because of in-render state invocations, this feature also increased our compatibility with the\nReact ecosystem as a lot of libraries relied on effects not being called multiple times due to in-render state updates.</p>\n\n\t\t\t\t<h3 id=\"10110\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#10110\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 10.11.0 (#10110)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>10.11.0</span>\n\t\t\t\t</h3><p>After a lot of research we found a way to introduce <a href=\"https://github.com/preactjs/preact/pull/3583\" target=\"_blank\" rel=\"noopener noreferrer\">useId</a> into Preact, this required a ton of research\nof how we could go about adding unique values for a given tree-structure. One of our maintainers wrote about\n<a href=\"https://www.jovidecroock.com/blog/preact-use-id\" target=\"_blank\" rel=\"noopener noreferrer\">our research at the time</a> and we&#39;ve iterated on it ever since trying to make it as collision free as possible...</p>\n\n\t\t\t\t<h3 id=\"10150\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#10150\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 10.15.0 (#10150)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>10.15.0</span>\n\t\t\t\t</h3><p>We found that a pass through re-render resulting in multiple new components re-rendering could result in our <code>rerenderQueue</code> being out of order, this could\nresult in our (context) updates propagating to components that would afterwards render <em>again</em> with stale values, you can check out\n<a href=\"https://github.com/preactjs/preact/commit/672782adbf9ccefa7a4d7c175f0adf8580f73c92\" target=\"_blank\" rel=\"noopener noreferrer\">the commit message</a> for a really detailed explanation! Doing so both\nbatches these updates up as well as increased our alignment for React libraries.</p>\n\n\t\t\t\t<h3 id=\"10160\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#10160\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 10.16.0 (#10160)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>10.16.0</span>\n\t\t\t\t</h3><p>In our research for v11 we went deep on child diffing as we were aware that there were a few cases where our current algorithm would fall short, just listing a few\nof these issues:</p>\n<ul>\n<li><a href=\"https://github.com/preactjs/preact/issues/3973\" target=\"_blank\" rel=\"noopener noreferrer\">removing an element before another would cause re-insertion</a></li>\n<li><a href=\"https://github.com/preactjs/preact/issues/2622\" target=\"_blank\" rel=\"noopener noreferrer\">re-insertiosn when removing more than 1 child</a></li>\n<li><a href=\"https://github.com/preactjs/preact/issues/2783\" target=\"_blank\" rel=\"noopener noreferrer\">unnecessary unmounting of keyed nodes</a></li>\n</ul>\n<p>Not all of these resulted in a bad state, some just meant decreased performance... When we found out that we could port skew-based diffing to Preact X we\nwere thrilled, not only would we fix a lot of cases we could see how this algorithm behaves in the wild! Which in retrospect, it did great, at times I would\nhave wished we had good testbeds to run these on first rather than our community having to report issues. I do want to use this opportunity to thank you all\nfor helping us out by always filing considerate issues with reproductions, you all are the absolute best!</p>\n\n\t\t\t\t<h3 id=\"10190\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#10190\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 10.19.0 (#10190)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>10.19.0</span>\n\t\t\t\t</h3><p>In 10.19.0 Marvin applied his research from <a href=\"https://fresh.deno.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">fresh</a> to add <a href=\"https://github.com/preactjs/preact/pull/4177\" target=\"_blank\" rel=\"noopener noreferrer\">pre-compiled JSX functions</a>,\nthis basically allows you to pre-compile your components during transpilation, when render-to-string is running we just have to concatenate the strings rather\nthan allocating memory for the whole VNode tree. The transform for this is exclusive to Deno at the moment but the general concept is present in Preact!</p>\n\n\t\t\t\t<h3 id=\"10202\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#10202\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: 10.20.2 (#10202)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>10.20.2</span>\n\t\t\t\t</h3><p>We have faced a number of issues where an event could bubble up to a newly inserted VNode which would result in undesired behaviour, this was fixed\n<a href=\"https://github.com/preactjs/preact/pull/4322\" target=\"_blank\" rel=\"noopener noreferrer\">by adding an event-clock</a>. In the following scenario, you would click the button which sets state, the browser\ninterleaves event bubbling with micro-ticks, which is also what Preact uses to schedule updates. This combination means that Preact will update the UI, meaning\nthat the <code>&lt;div&gt;</code> will get that <code>onClick</code> handler which we&#39;ll bubble up to and invoke the <code>click</code> again toggling this state immediately off again.</p>\n\n\t\t\t\t<div class=\"highlight-container\">\n\t\t\t\t\t<pre class=\"highlight\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>toggled<span class=\"token punctuation\">,</span> setToggled<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> toggled <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToggled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">clear</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToggled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">toggle on</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<h2 id=\"stability\">\n\t\t\t\t\t<a class=\"fragment-link\" href=\"#stability\">\n\t\t\t\t\t\t<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-label=\"Link to: Stability (#stability)\">\n\t\t\t\t\t\t\t<use href=\"/icons.svg#link\" ></use>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</a>\n\t\t\t\t\t<span>Stability</span>\n\t\t\t\t</h2><p>The above are some cherry-picked releases of things that our community received <em>without</em> breaking changes, but there is so much more... Adding a new major\nversion always leaves a part of the community behind and we don&#39;t want to do that. If we look at the Preact 8 release line we can see that there&#39;s still 100.000\ndownloads in the past week, the last 8.x release was 5 years ago, just to show that a part of the community gets left behind.</p>\n<p>Stability is great, we as the Preact team love stability. We actually released multiple major features on other ecosystem projects:</p>\n<ul>\n<li><a href=\"https://github.com/preactjs/signals\" target=\"_blank\" rel=\"noopener noreferrer\">Signals</a></li>\n<li><a href=\"https://github.com/preactjs/preact-render-to-string/pull/333\" target=\"_blank\" rel=\"noopener noreferrer\">Async rendering</a></li>\n<li><a href=\"https://github.com/preactjs/preact-render-to-string/pull/354\" target=\"_blank\" rel=\"noopener noreferrer\">Streaming rendering</a></li>\n<li><a href=\"https://github.com/preactjs/prefresh\" target=\"_blank\" rel=\"noopener noreferrer\">Prefresh</a></li>\n<li><a href=\"https://github.com/preactjs/preset-vite#prerendering-configuration\" target=\"_blank\" rel=\"noopener noreferrer\">The vite preset with pre-rendering</a></li>\n<li><a href=\"https://github.com/preactjs/preact-iso\" target=\"_blank\" rel=\"noopener noreferrer\">A new async router</a></li>\n<li><a href=\"https://github.com/preactjs/create-preact\" target=\"_blank\" rel=\"noopener noreferrer\">Create Preact</a></li>\n</ul>\n<p>We value our ecosystem and we value the extensions being built through our <a href=\"https://marvinh.dev/blog/preact-options/\" target=\"_blank\" rel=\"noopener noreferrer\">`options API`</a>,\nthis is one of the main drivers behind not wanting to introduce these breaking changes but instead, allow you all to benefit\nfrom our research without a painful migration path.</p>\n<p>This doesn&#39;t mean that Preact 11 won&#39;t happen but it might not be the thing that we initially thought it would be. Instead, we might just drop IE11 support and give you\nthose performance improvements, all while giving you the stability of Preact X. There are many more ideas floating around and we&#39;re very interested in the wider Preact experience in the context of meta-frameworks that provide things like routing out of the box. We&#39;re exploring this angle in our vite preset as well as <a href=\"https://fresh.deno.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Fresh</a> to get a good feel what a Preact first meta framework should look like.</p>\n"}