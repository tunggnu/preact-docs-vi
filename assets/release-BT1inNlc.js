async function f(e,n){const s=e!=null&&e.url?new URL(e.url).searchParams.get("repo"):"preact",{version:a,url:o}=await l(`preactjs/${s}`);return new Response(JSON.stringify({version:a,url:o}),{status:200,headers:{"Content-Type":"application/json","Cache-Control":"public, max-age=3600, stale-if-error=86400"}})}function c(e){if(!e.ok)throw new Error(`${e.status}: Request failed for '${e.url}'`);return e}const u=/^.*?(\d+)\.(\d+)\.(\d+)(.*)?$/g;function i(e){u.lastIndex=0;const n=u.exec(e);return n?[+n[1],+n[2],+n[3],n[4]].filter(s=>s!==void 0):[0,0,0]}const l=e=>fetch(`https://api.github.com/repos/${e}/releases`).then(c).then(n=>n.json()).then(n=>{const s=(n||[]).sort((a,o)=>{const t=i(a.tag_name),r=i(o.tag_name);return t[0]>r[0]?-1:t[0]<r[0]?1:t[1]>r[1]?-1:t[1]<r[1]?1:t[2]&&t.length===3>r[2]?-1:t[2]&&t.length===3<r[2]||t.length>3&&r.length===3?1:t.length===3&&r.length>3?-1:t[3]-r[3]});return{version:s[0].tag_name,url:s[0].html_url}});export{f as default};